<?php
/**
 * @file
 * Openlucius files module.
 */

/**
 * Implements hook_menu().
 */
function openlucius_files_menu() {

  // Initialize array.
  $items = array();

  $items['all-files'] = array(
    'title' => 'All Files',
    'page callback' => 'openlucius_files_allfiles',
    'page arguments' => array('all-files'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['group-files'] = array(
    'page callback' => 'openlucius_files_allfiles',
    'title' => 'Files',
    'type' => MENU_NORMAL_ITEM,
    'page arguments' => array(0, 1, 2),
    'access arguments' => array('access content'),
  );

  $items['remove-file/%/%'] = array(
    'page callback' => 'openlucius_files_remove_file',
    'page arguments' => array(1, 2),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('delete own file content'),
  );

  // For ajax callback (folder swapping for files).
  $items['folder-swap'] = array(
    'page callback' => 'openlucius_files_swap_folder',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer folders'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function openlucius_files_theme() {
  return array(
    'openlucius_files_file_info' => array(
      'variables' => array('vars' => NULL),
      'template' => 'templates/openlucius_files_file_info',
    ),
  );
}
/**
 * Implements hook_permission().
 */
function openlucius_files_permission() {
  return array(
    'administer folders' => array(
      'title' => t('Administer folders'),
      'description' => t('Move folders and assign files to folders.'),
    ),
  );
}

/**
 * Implements hook_node_insert().
 */
function openlucius_files_node_insert($node) {
  // Process files if any.
  openlucius_files_insert_into_openlucius_files($node);
}

/**
 * Implements hook_node_update().
 */
function openlucius_files_node_update($node) {

  // Reset node cache.
  entity_get_controller('node')->resetCache(array($node->nid));

  // Load node.
  $loaded_node = node_load($node->nid, NULL, TRUE);

  // Process files.
  openlucius_files_insert_into_openlucius_files($loaded_node);
}

/**
 * Implements hook_node_delete().
 */
function openlucius_files_node_delete($node) {

  // Get bundle for safe deletion.
  $bundle = openlucius_files_system_name_to_integer($node->type);

  // Remove all entries remaining.
  openlucius_files_remove($node->nid, $bundle);
}

/**
 * Implements hook_comment_insert().
 */
function openlucius_files_comment_insert($comment) {

  // Process files.
  openlucius_files_insert_into_openlucius_files($comment);
}

/**
 * Implements hook_comment_update().
 */
function openlucius_files_comment_update($comment) {

  // Process files.
  openlucius_files_insert_into_openlucius_files($comment);
}

/**
 * Implements hook_comment_delete().
 */
function openlucius_files_comment_delete($comment) {

  // Get bundle for safe deletion.
  $bundle = openlucius_files_system_name_to_integer($comment->node_type);

  // Remove all entries remaining.
  openlucius_files_remove($comment->cid, $bundle);
}

/**
 * Implements hook_block_info().
 */
function openlucius_files_block_info() {

  // Initialize array.
  $blocks = array();

  // User files block.
  $blocks['ol_user_files'] = array(
    'info' => t("User's files"),
  );

  // Group files block.
  $blocks['ol_group_files'] = array(
    'info' => t('Group files'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function openlucius_files_block_view($delta = '') {

  // Initialize array.
  $block = array();

  switch ($delta) {

    // Ol user files block.
    case 'ol_user_files':
      $block['subject'] = t("User's files");
      $block['content'] = openlucius_files_user_files();
      break;

    // Ol user files block.
    case 'ol_group_files':
      $block['subject'] = t('Files');
      $block['content'] = openlucius_files_group_files();
      break;

  }

  return $block;
}

/**
 * Custom function to remove file.
 *
 * @param int $pid
 *   The node id.
 * @param int $fid
 *   The file id.
 */
function openlucius_files_remove_file($pid, $fid) {
  // Load node for access check.
  $node = node_load($pid);
  $comment = NULL;

  // This is probably not a comment but a node.
  if (!$node) {
    $comment = comment_load($pid);
  }

  // Check if the user has access (safety first).
  if ((!empty($node) && node_access('delete', $node) || !empty($comment) && user_access('administer comments')) && isset($_GET['token']) && drupal_valid_token($_GET['token'])) {

    // Load file for deletion.
    $file = file_load($fid);

    // Get usage list and clear all entries for this file.
    $file_usage = file_usage_list($file);

    foreach ($file_usage['file'] as $type => $entry) {
      $keys = array_keys($entry);

      // Switch on entity type.
      switch ($type) {
        case 'comment':
          $entity = comment_load($keys[0]);

          // Check if the field is set.
          if (!empty($entity->field_shared_files)) {

            // Loop through attached files.
            foreach ($entity->field_shared_files[LANGUAGE_NONE] as $key => $attached_file) {

              // We have a match so unset it.
              if ($file->fid == $attached_file['fid']) {

                // Clear the file field.
                unset($entity->field_shared_files[LANGUAGE_NONE][$key]);
              }
            }
            comment_save($entity);
          }
          break;

        case 'node':
          $entity = node_load($keys[0]);
          // Check if the field is set.
          if (!empty($entity->field_shared_files)) {

            // Loop through attached files.
            foreach ($entity->field_shared_files[LANGUAGE_NONE] as $key => $attached_file) {

              // We have a match so unset it.
              if ($file->fid == $attached_file['fid']) {

                // Clear the file field.
                unset($entity->field_shared_files[LANGUAGE_NONE][$key]);
              }
            }
            node_save($entity);
          }
          break;
      }
    }

    // Delete file.
    file_delete($file, TRUE);

    // Remove custom entry.
    openlucius_files_remove_single_file($fid);

    // Notify user that something has happened.
    drupal_set_message(t('File @file has been successfully removed.', array('@file' => $file->filename)));
  }
  else {
    // Notify that the user has no access.
    drupal_set_message(t('You are not allowed to remove this file.'), 'error');
  }

  // Return.
  drupal_goto();
}

/**
 * Custom function to swap folders.
 */
function openlucius_files_swap_folder() {

  // Get variables.
  $fid = $_POST['fid'];
  $folder = $_POST['folder'];

  // Only numeric values.
  if (!is_numeric($fid) || !isset($_POST['token']) || !drupal_valid_token($_POST['token'])) {
    return FALSE;
  }

  // Update file entry.
  db_update('openlucius_files')
    ->fields(array('folder' => $folder))
    ->condition('fid', $fid, '=')
    ->execute();

  // Return true.
  drupal_json_output(TRUE);

  // Prevent further execution of code.
  drupal_exit();
}

/**
 * Custom function, implements files stream.
 *
 * @param string $type
 *   The type of page the function is called from.
 * @param int $groupid
 *   The groupid if for files overview.
 * @param int $folder
 *   The active folder.
 *
 * @return array
 *   An array for Drupal render.
 */
function openlucius_files_allfiles($type = NULL, $groupid = NULL, $folder = NULL) {

  // The logged in user.
  global $user;

  // Load user groups.
  $usergroups = openlucius_core_fetch_user_groups($user->uid);

  // Return empty string if user groups is empty.
  if (count($usergroups) == 0) {
    return openlucius_files_build_table(FALSE, $type, $groupid);
  }

  // If groupid isset.
  if ($groupid != NULL) {

    // Check if user has access, or the user is admin.
    if (in_array($groupid, $usergroups) || $user->uid == 1) {

      // Rewrite to single.
      $usergroups = array($groupid);
    }
    else {
      // You're not in this group or it doesn't exist.
      drupal_access_denied();

      // Prevent further execution.
      drupal_exit();
    }
  }

  // Get and store the result.
  $result = openlucius_files_get_files_result($usergroups, $folder, NULL, 20);

  // Build and return table.
  return openlucius_files_build_table($result, $type, $groupid);
}

/**
 * Custom rendering function for file result table.
 *
 * @param mixed $result
 *   Query results for table.
 * @param mixed $arg0
 *   The first argument used for checking @see openlucius_files_allfiles().
 * @param mixed $arg1
 *   The second argument used for checking @see openlucius_files_allfiles().
 *
 * @return array
 *   An array for Drupal render.
 */
function openlucius_files_build_table($result, $arg0 = NULL, $arg1 = NULL) {

  // Check if its the user dashboard.
  if ($arg0 == 'user' && $arg1 == 'dashboard') {
    $userdashboard = TRUE;
  }
  // Check if its the group files page.
  if ($arg0 == 'group-files' && is_numeric($arg1)) {
    $groupfiles = TRUE;
  }
  // Check if we are on the group homepage.
  if ($arg0 == 'ol_group') {
    $grouppage = TRUE;
  }

  // Variable for file removal link counting.
  $can_remove_file_count = 0;

  // Loop through our result and build row in the end.
  $rows = array();

  foreach ($result as $row) {
    // Check if node or comment.
    $is_node = openlucius_files_is_node($row->bundle);

    // Default empty.
    $folderselect = '';
    $link_to_group = '';

    // Get user friendly column name.
    $friendlybundle = openlucius_files_get_friendly_bundle_name($row->bundle);

    if ($is_node) {
      // Get node for title.
      $node = db_select('node', 'n')
        ->fields('n', array('title', 'type'))
        ->condition('n.nid', $row->pid, '=')
        ->addTag('node_access')
        ->execute()->fetchObject();

      if ($node->type != 'file') {
        // Build link to node, incl. node title.
        $linktocontent = l($node->title . ' (' . $friendlybundle . ')', 'node/' . $row->pid);
      }
      else {
        // If there is no content, show the minus sign.
        $linktocontent = '<span class="glyphicon glyphicon-minus"></span> (' . $friendlybundle . ')';
      }

      $group = db_select('node', 'n')
        ->fields('n', array('nid', 'title'))
        ->condition('n.nid', $row->gid, '=')
        ->addTag('node_access')
        ->execute()->fetchObject();

      // Build link to group node.
      $link_to_group = l($group->title, 'node/' . $group->nid);
    }
    else {
      // Load comment.
      $comment = comment_load($row->pid);
      // Build link to content.
      $linktocontent = l($comment->subject . ' (' . $friendlybundle . ')', 'node/' . $comment->nid, array('fragment' => 'comment-' . $comment->cid));
    }

    $remove_link = '';
    // If the user may edit he may delete the node and it's files.
    if ($is_node && drupal_valid_path('node/' . $row->pid . '/delete') || !$is_node && drupal_valid_path('comment/' . $row->pid . '/delete')) {
      $destination = drupal_get_destination();
      $destination['token'] = drupal_get_token();
      $remove_link
        = '
        <a href="' .
        url('remove-file/' . $row->pid . '/' . $row->fid, array('query' => $destination))
        . '" class="remove-file-link" data-confirm=" ' .
        t('Are you sure you want to delete this file?') . '">
          <span class="glyphicon glyphicon-remove"></span>
        </a>';

      // Increase by one.
      $can_remove_file_count++;
    }

    // Build 'uploaded by' column.
    if (module_exists('realname')) {
      $userobject = db_query("
      SELECT CASE
      WHEN LENGTH(r.realname) = 0
      OR r.realname IS NULL
      THEN u.name
      ELSE r.realname
      END AS name
      FROM {realname} r
      INNER JOIN {users} u
      ON r.uid = u.uid
      WHERE r.uid = :uid", array(':uid' => $row->uid))->fetchObject();
    }
    else {
      $userobject = db_select('users', 'u')
        ->fields('u', array('name'))
        ->condition('u.uid', $row->uid, '=')
        ->execute()->fetchObject();
    }
    $username = $userobject->name;
    $userlink = l($username, 'user/' . $row->uid);

    // It's no image, handle is as file.
    if (!$row->is_image) {

      // Build file link.
      $fileload = array(
        'uri' => $row->uri,
        'filemime' => $row->filemime,
        'filesize' => $row->filesize,
        'filename' => $row->filename,
      );

      // Build link.
      $filelink = theme('file_link', array('file' => (object) $fileload));
    }
    // It's an image, handle it as image.
    else {
      // Build image.
      $rendered_image = theme('image_style', array(
          'style_name' => 'ol_50x50',
          'path' => $row->uri,
        )
      );

      // Build file url.
      $imageurl = file_create_url($row->uri);
      $filelink = l($rendered_image, $imageurl, array('html' => TRUE));
    }

    // Reset form.
    $form = array();

    // Use form api for quick hidden items.
    $form['hidden_fid'] = array(
      '#type' => 'hidden',
      '#value' => $row->fid,
      '#attributes' => array('class' => array('fid')),
    );

    // Render item.
    $hidden = drupal_render($form);

    // We are viewing the group dashboard, or user dashboard, get folder-nid.
    $folderid = $row->folder;

    // When folderid is not 0 get the folder-info for this file.
    if ($folderid == '0') {
      $foldervalue = t('No Folder');
    }
    else {
      $nodeobject = db_query("SELECT n.title, g.field_shared_group_reference_nid
                              FROM {node} n
                              LEFT JOIN {field_data_field_shared_group_reference} g
                              ON g.entity_id = n.nid
                              WHERE nid = :nid",
        array(':nid' => $folderid))->fetchObject();
      // Build the folder link.
      $foldervalue = l($nodeobject->title, 'group-files/' . $nodeobject->field_shared_group_reference_nid . '/' . $folderid);
    }

    if (isset($groupfiles) && $groupfiles) {
      // We are viewing /group-files, build the drop for managing folder.
      $folderselect = openlucius_files_fetch_folder_tree($row->gid, $row->folder);

      // Check if empty.
      if ($folderselect == "") {
        $folderselect = t('No Folder');
      }
    }

    // Build vars for file info.
    $vars['filelink'] = $filelink;
    $vars['linktocontent'] = $linktocontent;
    $vars['userlink'] = $userlink;
    $vars['timeago'] = format_interval(($_SERVER['REQUEST_TIME'] - $row->timestamp), 2);
    if ($arg0 != 'group-files') {
      $vars['link_to_group'] = $link_to_group;
    }
    $file_info = theme('openlucius_files_file_info', array('vars' => $vars));

    // Place the data in an array with key/value.
    $data = array(
      'file' => $hidden . $file_info,
      'folder' => $foldervalue,
    );

    // If no folderselect is created, remove it from the data.
    if ($folderselect) {
      $data['folderselect'] = $folderselect;
    }

    // Do not show uploaded by on the user dashboard.
    if (isset($userdashboard) && $userdashboard) {
      unset($data['uploadedby']);
    }

    // On both the group homepage, group files page and folder files
    // hide the group.
    if ((isset($groupfiles) && $groupfiles) || (isset($grouppage) && $grouppage)) {
      unset($data['group']);
    }

    // Check if unset link is available.
    if (!empty($remove_link)) {
      $data['remove'] = $remove_link;
    }

    // Build row.
    $rows[] = $data;
  }

  // If there is any delete link, populate the empty for styling.
  foreach ($rows as $id => $row) {
    if ($can_remove_file_count > 0 && !isset($row['remove'])) {
      $rows[$id]['remove'] = '';
    }
  }

  // We are going to output the results in a table with a nice header.
  $header = array(
    'file' => t('File'),
    'folder' => t('Folder'),
  );

  // Add extra header for group-files.
  if ($arg0 == 'group-files') {
    $header['folder2'] = t('Folder swap');
  }

  // Do not show uploaded by on the user dashboard.
  if (isset($userdashboard) && $userdashboard) {
    unset($header['uploadedby']);
  }

  // On both the group homepage, the group files page
  // and folder files hide the group.
  if ((isset($groupfiles) && $groupfiles) || (isset($grouppage) && $grouppage)) {
    unset($header['group']);
  }

  // Add column for removal if necessary.
  if ($can_remove_file_count > 0) {
    $header['tools'] = t('Tools');
  }

  // If there are rows.
  if (count($rows) > 0) {

    // Add row for count results and link to 'all files in this group'.
    if ($arg0 == 'ol_group' && is_numeric($arg1)) {
      $filescountlink = l(t('View all @filecount files in this Group >>',
          array('@filecount' => openlucius_files_count_group($arg1))),
        'group-files/' . $arg1);
      $rows[] = array(
        'data' => array(
          array(
            'data' => $filescountlink,
            'colspan' => 7,
          ),
        ),
      );
    }
    // Create a render array ($build) which will be themed as table with pager.
    $build['pager_table'] = array(
      '#theme' => 'table',
      '#prefix' => '<div class="table-responsive">',
      '#header' => $header,
      '#rows' => $rows,
      '#suffix' => '</div><input type="hidden" id="updated-message" value="' . t('Success') . '" />',
    );

    // Attach the pager theme. TODO Add ajax pager.
    if ($arg0 == 'node' || $arg0 == 'all-files' || $arg0 == 'group-files') {
      $build['pager_pager'] = array(
        '#theme' => 'pager',
      );
    }
  }
  else {
    if (isset($grouppage) && $grouppage) {
      return;
    }

    $build['#markup'] = t('No Files uploaded yet');
  }

  return $build;
}

/**
 * Custom function to get group files.
 */
function openlucius_files_group_files() {

  $item = menu_get_object();
  $menu = menu_get_item();

  if (!empty($item) && !empty($menu)) {
    // Get result.
    $result = openlucius_files_get_files_result($item->nid, NULL, NULL, 5);

    return openlucius_files_build_table($result, $menu['page_arguments'][0]->type, $menu['page_arguments'][0]->nid);
  }
}

/**
 * Custom function to get user files.
 */
function openlucius_files_user_files() {

  // The logged in user.
  global $user;

  // Get the menu object.
  $menu = menu_get_item();
  $user_id = NULL;

  if (!empty($menu['page_arguments'][2])) {
    // Get user id from menu object.
    $user_id = $menu['page_arguments'][2];
  }

  if ($menu['map'][1] == 'dashboard' && is_numeric($user_id)) {
    if ($user->uid == 1) {
      $result = openlucius_files_get_files_result(NULL, NULL, $user_id, 5);
    }
    else {
      // Fetch user groups.
      $usergroups = openlucius_core_fetch_user_groups($user->uid);

      // If user is not in a group return empty table.
      if (count($usergroups) == 0) {
        return openlucius_files_build_table(FALSE);
      }

      // Get result.
      $result = openlucius_files_get_files_result($usergroups, NULL, $user_id, 5);
    }

    // Return the build table.
    return openlucius_files_build_table($result, $menu['map'][0], $menu['map'][1]);
  }
}

/**
 * Custom query for getting files.
 *
 * @param mixed $groups
 *   The groups are default to NULL.
 * @param int $folder
 *   The folder id (default NULL).
 * @param int $uid
 *   The user id (default NULL).
 * @param int $limit
 *   The limit number (default '20').
 */
function openlucius_files_get_files_result($groups = NULL, $folder = NULL, $uid = NULL, $limit = 20) {

  // The logged in user.
  global $user;

  // Query the database for files linked to nodes.
  $node_query = db_select('openlucius_files', 'f')->fields('f');
  $node_query->condition('f.bundle', array(0, 1, 2, 3, 4, 11), 'IN');

  // Check if user is a client.
  if (openlucius_core_user_is_client()) {

    $node_query->condition('fd.field_shared_show_clients_value', 1, '=');
    $node_query->leftjoin('field_data_field_shared_show_clients', 'fd', 'fd.entity_id = f.pid');
  }

  // Query the database for files linked to comments.
  $comment_query = db_select('openlucius_files', 'f')->fields('f');
  $comment_query->condition('f.bundle', array(5, 6, 7, 8, 9, 10), 'IN');

  // Check if user is a client.
  if (openlucius_core_user_is_client()) {
    // Join parent node and add condition.
    $comment_query->leftjoin('comment', 'c', 'c.cid = f.pid');
    $comment_query->condition('pa.field_shared_show_clients_value', 1, '=');
    $comment_query->leftjoin('field_data_field_shared_show_clients', 'pa', 'pa.entity_id = c.nid');
  }

  // Union of both selects.
  $node_query->union($comment_query, 'UNION ALL');

  // Query the database for files.
  $query = db_select('openlucius_files', 'f')->extend('PagerDefault');

  // Join subquery.
  $query->join($node_query, 'nq', 'f.oid = nq.oid');

  // Join for timestamp and user id and check for status.
  $query->leftjoin('file_managed', 'fu', 'f.fid = fu.fid');

  // Join for.
  $query->leftjoin('users', 's', 's.uid = fu.uid');

  $query->fields('f');
  $query->fields('fu', array(
      'timestamp',
      'uri',
      'uid',
      'filename',
      'filemime',
      'filesize',
      'status',
    )
  );

  $query->fields('s', array('name'));

  // Check if groups are set.
  if ($groups !== NULL) {

    // More than one group.
    if (is_array($groups)) {
      $query->condition('f.gid', $groups, 'IN');
    }
    else {
      // One group.
      $query->condition('f.gid', $groups, '=');
    }
  }

  // If user id is set.
  if ($uid !== NULL) {

    $query->condition('s.uid', $uid, '=');

    // Skip admin.
    if ($user->uid != 1) {

      // Add a check for the groups of the current user.
      $query->condition('f.gid', $groups, 'IN');
    }
  }

  // Check if we're in a folder.
  if (is_numeric($folder)) {

    // If set only current folder.
    $query->condition('f.folder', $folder, '=');
  }

  // Only display active files.
  $query->condition('fu.status', 1, '=');

  // Limit and Order by fid.
  $result = $query->limit($limit)->orderBy('f.fid', 'desc')->execute();

  // Return.
  return $result;
}

/**
 * In order to save some space in the database we've used numeric identifiers.
 *
 * @param int $id
 *   The numeric identifier of the bundle.
 *
 * @return mixed
 *   A textual representation of the bundle or FALSE if not found.
 */
function openlucius_files_get_friendly_bundle_name($id) {

  // The identifiers.
  $identifiers = array(
    0 => t('Message'),
    1 => t('Event'),
    2 => t('Todo-list'),
    3 => t('Todo'),
    4 => t('File'),
    5 => t('Comment in Message'),
    6 => t('Comment in Event'),
    7 => t('Comment in Todo-list'),
    8 => t('Comment in Todo'),
    9 => t('Comment in file'),
    10 => t('Comment in Text-document'),
    11 => t('Text-document'),
  );

  // Return integer.
  if (isset($identifiers[$id])) {
    return $identifiers[$id];
  }

  // Return FALSE if not in array.
  return FALSE;
}

/**
 * Custom function to convert system_name to integer.
 *
 * @param string $system_name
 *   The drupal identifier of the bundle.
 *
 * @return mixed
 *   The numeric representation of the bundle or FALSE if not found.
 */
function openlucius_files_system_name_to_integer($system_name) {

  // System names to integer.
  $system_names = array(
    'ol_message' => 0,
    'ol_event' => 1,
    'ol_todo_list' => 2,
    'ol_todo' => 3,
    'file' => 4,
    'comment_node_ol_message' => 5,
    'comment_node_ol_event' => 6,
    'comment_node_ol_todo_list' => 7,
    'comment_node_ol_todo' => 8,
    'comment_node_file' => 9,
    'comment_node_ol_text_document' => 10,
    'ol_text_document' => 11,
  );

  // Check if system name is set.
  if (isset($system_names[$system_name])) {
    // Return.
    return $system_names[$system_name];
  }

  // Return FALSE if not in array.
  return FALSE;
}

/**
 * Custom function to insert files into the openlucius_files table.
 *
 * @param object $node
 *   The node object to be read.
 */
function openlucius_files_insert_into_openlucius_files($node) {

  // Get active menu data.
  $item = menu_get_item();

  // Check if it is a comment.
  if (isset($node->cid) && $node->cid != 0) {
    // Get the parent_node.
    $parent_node = node_load($node->nid);

    // Get group from node.
    if (isset($parent_node->field_shared_group_reference[LANGUAGE_NONE])) {
      $group = $parent_node->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
    }

    // The comment is the parent.
    $parent = $node->cid;

    // Skip empty.
    if (!isset($node->node_type)) {
      return;
    }

    // Get the numeric value of the bundle.
    $bundle = openlucius_files_system_name_to_integer($node->node_type);
  }
  else {
    // Get group from node.
    if (isset($node->field_shared_group_reference[LANGUAGE_NONE][0])) {
      $group = $node->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
    }

    // The parent is the node.
    $parent = $node->nid;

    // Get the numeric value of the bundle.
    $bundle = openlucius_files_system_name_to_integer($node->type);
  }

  // If without a group we should skip the whole caboodle.
  if (!isset($group)) {
    return FALSE;
  }

  // Initialize array.
  $files = array();

  // Check if we have shared files.
  if (isset($node->field_shared_files[LANGUAGE_NONE])) {

    // Default folder is 0.
    $folder = 0;

    // Check if a folder is available.
    if (!empty($item['page_arguments'][2])) {
      $arg = $item['page_arguments'][2];

      // Check if we have a fourth argument and it is a folder.
      if (openlucius_files_is_folder($arg)) {
        $folder = $arg;
      }
    }

    // Loop through all files.
    foreach ($node->field_shared_files[LANGUAGE_NONE] as $file) {

      // Collect files for cleanup check.
      $files[] = $file['fid'];
      // Check if entry exists.
      if (openlucius_files_file_entry_exists($group, $file['fid'])) {
        continue;
      }

      // Load file.
      $file_object = file_load($file['fid']);
      // Default value is FALSE.
      $is_image = 0;
      // Check for image.
      $info = image_get_info($file_object->uri);

      // If mime_type is set and not 'image/psd', it's an image.
      if ($info && $info['mime_type'] != 'image/psd') {
        $is_image = 1;
      }

      // Insert into openlucius_files.
      db_insert('openlucius_files')
        ->fields(array(
            'pid' => $parent,
            'gid' => $group,
            'fid' => $file['fid'],
            'bundle' => $bundle,
            'is_image' => $is_image,
            'folder' => $folder,
          ))
        ->execute();
    }
  }

  // Check if this node has files.
  if (!empty($files)) {
    // Used to clean up old entries.
    openlucius_files_cleanup_group($group, $parent, $files);
  }
}

/**
 * Custom function to cleanup a group after uploading / removing files.
 *
 * @param int $group
 *   The number for group.
 * @param int $parent
 *   The number for parent.
 * @param array $files
 *   The file array.
 */
function openlucius_files_cleanup_group($group, $parent, array $files) {
  db_delete('openlucius_files')
    ->condition('fid', $files, 'NOT IN')
    ->condition('gid', $group, '=')
    ->condition('pid', $parent, '=')
    ->execute();
}

/**
 * Custom function to remove a single file.
 *
 * @param int $fid
 *   The file id to remove.
 */
function openlucius_files_remove_single_file($fid) {

  // Load file for deletion.
  $file = file_load($fid);

  // Delete file.
  if ($file) {
    file_delete($file);
  }

  // Remove from the custom table.
  db_delete('openlucius_files')
    ->condition('fid', $fid, '=')
    ->execute();
}

/**
 * Custom function to check whether a file entry exists.
 *
 * @param int $group
 *   The group where the file could be in.
 * @param int $fid
 *   The file id to check.
 */
function openlucius_files_file_entry_exists($group, $fid) {
  return db_select('openlucius_files', 'f')
    ->fields('f', array('oid'))
    ->condition('gid', $group, '=')
    ->condition('fid', $fid, '=')
    ->execute()
    ->fetchField();
}

/**
 * Custom function to remove file entries.
 *
 * @param int $id
 *   The identifiers.
 * @param string $bundle
 *   The attached bundle.
 */
function openlucius_files_remove($id, $bundle) {
  // To prevent unnecessary checking and comparing
  // (remove all entries with this node id).
  db_delete('openlucius_files')
    ->condition('pid', $id)
    ->condition('bundle', $bundle)
    ->execute();
}

/**
 * Custom function to verify that a node id belongs to a folder type node.
 *
 * @param int $nid
 *   The node id number.
 */
function openlucius_files_is_folder($nid) {
  return db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'ol_file_folder', '=')
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchField();
}

/**
 * Custom function to get file count for group.
 *
 * @param int $gid
 *   The group id.
 */
function openlucius_files_count_group($gid) {
  // Select files from group.
  $query = db_select('openlucius_files', 'o')
    ->fields('o', array('fid'))
    ->condition('gid', $gid, '=');

  // Check if user is a client.
  if (user_access('openlucius client')) {

    // TODO replace by addtag ->addTag('node_access').
    $query->condition('fd.field_shared_show_clients_value', 1, '=');
    $query->leftjoin('field_data_field_shared_show_clients', 'fd', 'fd.entity_id = o.pid');
  }

  // Execute query.
  $result = $query->execute();

  // Return.
  return $result->rowCount();
}

/**
 * Custom function for node / comment identification.
 *
 * @param int $id
 *   The bundle id.
 *
 * @return bool
 *   Returns TRUE on node FALSE on comment.
 */
function openlucius_files_is_node($id) {

  // 0 - 4 and 11 are the nodes.
  return in_array($id, array(0, 1, 2, 3, 4, 11));
}

/**
 * Custom function to fetch and build folder with optgroup.
 *
 * @param int $gid
 *   The group id.
 * @param int $folder
 *   The current folder.
 *
 * @return string
 *   A html string containing the folder tree.
 */
function openlucius_files_fetch_folder_tree($gid, $folder) {

  // No access so display folder.
  if (!user_access('administer folders')) {
    // Query to get folder title.
    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->condition('n.nid', $folder, '=');
    $result = $query->execute();

    // Return.
    return $result->fetchField();
  }

  // Select node.
  $query = db_select('node', 'n');

  // Join for group selection.
  $query->leftjoin('field_data_field_shared_group_reference', 'g', 'n.nid = g.entity_id');

  // Join for for structure.
  $query->leftjoin('draggableviews_structure', 'd', 'n.nid = d.entity_id');

  // Select fields.
  $query->fields('d', array('parent', 'weight'));
  $query->fields('n', array('nid', 'title'));

  // Only current group.
  $query->condition('g.field_shared_group_reference_nid', $gid, '=');

  // Only published folders.
  $query->condition('n.status', 1, '=');

  // Only select folders.
  $query->condition('n.type', 'ol_file_folder', '=');

  // Add node_access.
  $query->addTag('node_access');

  // Order by weight.
  $result = $query->orderBy('d.weight', 'ASC')->execute();

  // Fetch result.
  $tree = $result->fetchAll();

  // Return.
  return openlucius_files_process_folder_tree($tree, $folder);
}

/**
 * Custom function to build optgroup from folder tree.
 *
 * @param array $tree
 *   The array to be processed.
 * @param int $folder
 *   The default folder.
 *
 * @return string
 *   A html string containing the folder tree.
 */
function openlucius_files_process_folder_tree($tree, $folder) {

  // Initialize array.
  $options = array();

  // Loop through items.
  foreach ($tree as $option) {

    // Typecasting.
    $opt = (array) $option;

    // No parent whatsoever so add.
    if ($opt['parent'] == 0) {
      // Keep complete option as we need it later on to build sub-sub items etc.
      $options[$opt['nid']] = $opt;
    }
    else {
      // Traverse tree.
      openlucius_files_traverse_options($opt, $options);
    }
  }

  // Cleanup.
  openlucius_files_traverse_cleanup($options);

  // Add No folder item.
  $options = array(0 => t('No Folder')) + $options;

  // Initialize $html.
  $html = "";

  // Build unsorted list.
  openlucius_files_traverse_list($options, $html);

  $form['select'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#attributes' => array(
      'class' => array('swapfolder'),
      'data-token' => drupal_get_token(),
    ),
    // Not default_value as it is not submitted by drupal.
    '#value' => array($folder),
    '#suffix' => '<div class="select_holder"><ul class="custom-select">' . $html . '</ul></div>',
  );

  // Return drupal_render.
  return drupal_render($form);
}

/**
 * Custom function to traverse options list and add labels.
 *
 * @param object $option
 *   The option object.
 * @param array $options
 *   The options array reference.
 */
function openlucius_files_traverse_options($option, array &$options) {

  // Loop through options to find parent.
  foreach ($options as $nid => $opt) {
    // If it matches create a sub item by using the title
    // and adding the full option.
    if ($nid == $option['parent']) {
      $options[$opt['title']][$option['nid']] = $option;
    }
    // Dive deeper into the $options if possible.
    else {
      // If we have a label we have children.
      if (!is_numeric($nid)) {
        // Traverse deeper.
        openlucius_files_traverse_options($option, $options[$nid]);
      }
    }
  }
}

/**
 * Custom function to cleanup the debris.
 *
 * @param array $options
 *   The options array reference.
 */
function openlucius_files_traverse_cleanup(array &$options) {

  // Loop through the options array.
  foreach ($options as $nid => $option) {

    // It is a folder so cleanup.
    if (is_numeric($nid)) {
      // Replace array by value.
      $options[$nid] = $option['title'];
    }
    // It is an optgroup so travel deeper.
    else {
      openlucius_files_traverse_cleanup($options[$nid]);
    }
  }
}

/**
 * Custom recursive function to generate unsorted list.
 *
 * @param array $options
 *   The options array.
 * @param string $html
 *   The indent value.
 * @param int $indent
 *   The html string.
 */
function openlucius_files_traverse_list(array $options, &$html, $indent = 0) {

  // Loop through options.
  foreach ($options as $nid => $option) {

    // It is a folder so create list item.
    if (is_numeric($nid)) {
      // Append html.
      $html .= sprintf('<li class="indent-%d" data-nid="%d">%s<span class="glyphicon"></span></li>', $indent, $nid, check_plain($option));
    }
    // It is an optgroup so travel deeper.
    else {
      $indent++;
      openlucius_files_traverse_list($options[$nid], $html, $indent);
    }
  }
}
