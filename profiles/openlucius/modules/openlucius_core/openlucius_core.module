<?php
/**
 * @file
 * This file contains all core functions
 */

// Define default user role (openlucius authenticated user).
define('OPENLUCIUS_CORE_OPENLUCIUS_DEFAULT_ROLE', 6);

// Define client user role.
define('OPENLUCIUS_CORE_OPENLUCIUS_CLIENT_ROLE', 5);

/**
 * Implements hook_menu_alter().
 */
function openlucius_core_menu_alter(&$items) {

  // Set callbacks.
  //matt commented
  //$items['user/%user']['page callback'] = 'openlucius_core_redirect';

  // Prevent access to edit for certain users.
 //matt commented
  //$items['user/%user/edit']['access callback'] = 'openlucius_core_user_edit_access';

  // Prevent direct access to path node.
  $items['node']['access callback']      = FALSE;
  $items['node/add']['access arguments'] = array('access add content page');

  // Only those who may edit.
  $items['taxonomy/term/%']['access arguments'][]        = array('administer taxonomy');
  $items['admin/structure/taxonomy']['access arguments'] = array('administer taxonomy');

  // Hide super admin only paths.
  $items['admin/people']['access callback'][]                          = 'openlucius_core_access_callback';
  $items['admin/people/people']['access callback'][]                   = 'openlucius_core_access_callback';
  $items['admin/people/permissions']['access callback'][]              = 'openlucius_core_access_callback';
  $items['admin/people/permissions/list']['access callback'][]         = 'openlucius_core_access_callback';
  $items['admin/people/permissions/roles']['access callback'][]        = 'openlucius_core_access_callback';
  $items['admin/config/people/accounts']['access callback'][]          = 'openlucius_core_access_callback';
  $items['admin/config/people/accounts/settings']['access callback'][] = 'openlucius_core_access_callback';

  $items['admin/people/permissions/roles/edit/%user_role']['access arguments'] = array('administer user settings');
  unset($items['admin/people/permissions/roles/edit/%user_role']['access callback']);

  $items['admin/people/permissions/roles/delete/%user_role']['access arguments'] = array('administer user settings');
  unset($items['admin/people/permissions/roles/delete/%user_role']['access callback']);
}

/**
 * Implements hook_init().
 */
function openlucius_core_init() {

  $node = menu_get_object();
  // Store active group / active todo-list in session (required for ajax).
  if (!empty($node) && !empty($node->nid)) {
    // Check if it is a group.
    if (isset($node->type) && $node->type == 'ol_group') {
      // Due to ajax killing our fancy select view we have to use this
      // (remember group audience!).
      $_SESSION['active_group'] = $node->nid;
    }
    // Check if we're in a todo list.
    elseif (isset($node->type) && $node->type == 'ol_todo_list') {
      // Due to ajax killing our fancy select view we have to use this
      // (remember group audience!).
      $_SESSION['active_todo_list'] = $node->nid;
    }

    // We have no group get group from current node.
    if (!isset($_SESSION['active_group'])) {
      // Check if the current node has a group reference.
      if (isset($node->field_shared_group_reference[LANGUAGE_NONE][0]['nid'])) {
        $_SESSION['active_group'] = $node->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
      }
    }
  }

  // Check if user needs to login for this path.
  if (openlucius_core_path_access() == FALSE) {

    // Reroute user to login page.
    drupal_goto('user/login', array('query' => array('destination' => $_GET['q'])));
  }

  // Redirect for existing paths.
  // TODO remove, this shouldn't be necessary.
  openlucius_core_existing_path_redirect();

  $maintenance = variable_get('maintenance_mode', FALSE);

  if ($maintenance) {
    $messages                 = drupal_get_messages('status', FALSE);
    $maintenance_mode_message = variable_get('maintenance_mode_message');
    $found                    = FALSE;
    if (isset($messages['status'])) {
      foreach ($messages['status'] as $message) {
        if ($message == $maintenance_mode_message) {
          $found = TRUE;
          break;
        }
      }
    }
    if (!$found) {
      drupal_set_message(filter_xss_admin($maintenance_mode_message));
    }
  }

  // Enable table drag if the user has access and they are on the overview.
  if (user_access('openlucius todo transfer')) {
    $menu = menu_get_item();

    // Only enable on the todo-list overview of a group or on group dashboard.
    if (isset($menu['path']) && $menu['path'] == 'group-todo-lists' || isset($menu['page_callback']) && $menu['page_callback'] == 'node_page_view' && $menu['page_arguments'][0]->type == 'ol_group') {
      // Add the draggable and droppable.
      drupal_add_library('system', 'ui.sortable');

      // Add the data to the javascript for further use.
      drupal_add_js(array('openlucius_todo_move_enabled' => TRUE), 'setting');
    }
  }

  // Add the todo breakdown js on todo pages.
  if (isset($node->type) && $node->type == 'ol_todo') {
    drupal_add_js(drupal_get_path('module', 'openlucius_core') . '/js/openlucius_core_todo_breakdown.js');
  }
}

/**
 * Implements hook_permission().
 */
function openlucius_core_permission() {
  return array(
    'ol show non-client content'             => array(
      'title'       => t('Show non-client content'),
      'description' => t("Permission to view content that is marked as don't show to client"),
    ),
    'openlucius client'                      => array(
      'title'       => t('Restrict client access'),
      'description' => t("Permission to restrict what a client is allowed to see within OpenLucius"),
    ),
    'access add content page'                => array(
      'title'       => t('Offer access to the add content page'),
      'description' => t('Permission to check whether the user can access the node/add screen'),
    ),
    'administer openlucius configuration'    => array(
      'title'       => t('Offer access to OpenLucius configuration'),
      'description' => t('Permission to check whether the user can access the OpenLucius configuration'),
    ),
    'administer default group configuration' => array(
      'title'       => t('Configure default groups for new users'),
      'description' => t('Permission to check whether the user can access the default groups configuration'),
    ),
    'administer user settings'               => array(
      'title'       => t('Configure user settings'),
      'description' => t('Permission for certain setting pages, only give to administrators'),
    ),
    'openlucius todo toggle'                 => array(
      'title'       => t('Toggle todos'),
      'description' => t("Permission to use the todo toggle for quickly opening / closing todo's"),
    ),
    'openlucius todo transfer'               => array(
      'title'       => t("Transfer todo's"),
      'description' => t("Permission to transfer todo's from one line list to another"),
    ),
    'move nodes'                             => array(
      'title'       => t('Move nodes'),
      'description' => t('Permission to move nodes'),
    ),
    'access todo breakdown'                  => array(
      'title'       => t('Access todo breakdown'),
      'description' => t('Permission to access todo breakdown'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function openlucius_core_menu() {

  $items = array();

  // Autocomplete on node title.
  $items['autocomplete'] = array(
    'page callback'    => 'openlucius_core_autocomplete',
    'page arguments'   => array(1, 2, 3),
    'type'             => MENU_NORMAL_ITEM,
    'access arguments' => array('access content'),
  );

  // Remove user from group.
  $items['group-users/removefromgroup/%/%'] = array(
    'page callback'    => 'openlucius_core_remove_users_from_group',
    'page arguments'   => array(2, 3),
    'type'             => MENU_NORMAL_ITEM,
    'access arguments' => array('create ol_group content'),
  );

  // Recent stuff.
  $items['recent-stuff'] = array(
    'page callback'    => 'openlucius_core_get_recent_stuff',
    'type'             => MENU_NORMAL_ITEM,
    'access arguments' => array('access content'),
  );

  // Placeholder for configuration.
  $items['admin/config/openlucius'] = array(
    'title'            => 'Configuration',
    'description'      => 'Placeholder for the other Openlucius configuration pages.',
    'page callback'    => 'openlucius_core_default_config_page',
    'access arguments' => array('administer openlucius configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'position'         => 'left',
    'weight'           => 0,
  );

  // Placeholder for configuration.
  $items['admin/config/openlucius/general'] = array(
    'title'            => 'Configuration',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer openlucius configuration'),
  );

  // Page for default group/team configuration.
  $items['admin/config/openlucius/groups'] = array(
    'title'            => 'Default group/team',
    'description'      => 'Configure members in default groups/teams.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_core_default_group_settings_form'),
    'access arguments' => array('administer default group configuration'),
    'type'             => MENU_LOCAL_TASK,
    'tab_parent'       => 'admin/config/openlucius',
  );

  $items['todo/toggle/%node'] = array(
    'page callback'    => 'openlucius_core_todo_toggle',
    'page arguments'   => array(2),
    'type'             => MENU_CALLBACK,
    'access arguments' => array('openlucius todo toggle'),
  );

  $items['todo/transfer/%node'] = array(
    'page callback'    => 'openlucius_core_todo_transfer',
    'page arguments'   => array(2),
    'type'             => MENU_CALLBACK,
    'access arguments' => array('openlucius todo transfer'),
  );

  $items['todo/update-weights'] = array(
    'page callback'    => '_openlucius_core_todo_update_weights',
    'type'             => MENU_CALLBACK,
    'access arguments' => array('openlucius todo transfer'),
  );

  $items['node/%node/move'] = array(
    'title'            => 'Move item',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_core_move_node_form'),
    'access arguments' => array('move nodes'),
    'type'             => MENU_CALLBACK,
    'file'             => 'includes/openlucius_core_move_node.inc',
    'weight'           => 3,
  );

  // Ajax page for breaking down a todo.
  $items['node/%node/breakdown'] = array(
    'title'            => 'Break down todo',
    'description'      => 'Ajax page for breaking down a todo.',
    'page callback'    => 'openlucius_core_breakdown_todo',
    'page arguments'   => array(0, 1),
    'access arguments' => array('access todo breakdown'),
    'type'             => MENU_CALLBACK,
  );

  // Ajax page for breaking down a todo.
  $items['comment/%openlucius_core_comment_parent/breakdown'] = array(
    'title'            => 'Break down todo',
    'description'      => 'Ajax page for breaking down a todo.',
    'page callback'    => 'openlucius_core_breakdown_todo',
    'page arguments'   => array(0, 1),
    'access arguments' => array('access todo breakdown'),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Page callback function to show text to the user.
 * @return string
 *   The output string.
 */
function openlucius_core_default_config_page() {
  return t('This is the landing page for the configuration. If any configuration is available, use the tabs.');
}

/**
 * Implements hook_views_plugins().
 */
function openlucius_core_views_plugins() {
  $plugins = array(
    'access' => array(
      'openlucius_core_custom_access'      => array(
        'title'   => t('Custom access check for groups'),
        'help'    => t('This is a custom access plugin for group access'),
        'handler' => 'openlucius_core_group_access_plugin',
        'path'    => drupal_get_path('module', 'openlucius_core'),
      ),
      'openlucius_core_custom_feed_access' => array(
        'title'   => t('Custom access check for ical feeds'),
        'help'    => t('This is a custom access plugin for ical feeds access'),
        'handler' => 'openlucius_core_ical_feed_access',
        'path'    => drupal_get_path('module', 'openlucius_core'),
      ),
    ),
  );

  return $plugins;
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function openlucius_core_preprocess_views_view_fields(&$vars) {
  $view = $vars['view'];
  // Alter views fields for users in groups, we need the edit url.
  if (user_access('create ol_group content') && $view->name == 'users_in_groups' && $view->current_display == 'page') {
    // We can't remove users from the all-users page.
    $icon                               = '<span class="glyphicon glyphicon-remove"></span>';
    $url                                = 'group-users/removefromgroup/' . $vars['view']->args[0] . '/' . $vars['row']->uid;
    $vars['fields']['nothing']->content = '<a href="' . url($url, array('query' => drupal_get_destination())) . '">' . $icon . '</a>';
  }
}

/**
 * Implements hook_views_query_alter().
 */
function openlucius_core_views_query_alter(&$view, &$query) {

  // Check for the new users block (block_1).
  if ($view->name == 'users_in_groups' && $view->current_display == 'block_1') {
    // The logged in user.
    global $user;
    // Check the permissions of the logged in user.
    if (openlucius_core_user_is_client()) {
      // Loop through the query where statements.
      foreach ($query->where as $key_where => $where) {
        // Loop through all conditions.
        foreach ($where['conditions'] as $key_condition => $condition) {
          // Check if the field is field_group_nid.
          if ($condition['field'] == 'field_data_field_groups.field_groups_nid') {
            // Change the condition to be IN (in array).
            $query->where[$key_where]['conditions'][$key_condition]['operator'] = 'IN';
            // Change the groups to the groups you are in.
            $query->where[$key_where]['conditions'][$key_condition]['value'] = openlucius_core_fetch_user_groups($user->uid);
          }
        }
      }
    }
  }

  // Fix for missing tasks in calendar.
  elseif ($view->name == 'group_calendar' && $view->current_display == 'page_4') {
    // Check if the contextual filter has been set.
    if (isset($query->where['date'])) {

      // Change the from date format to YYY-MM-DD.
      $view->query->where['date']['conditions'][0]['field'] = "DATE_FORMAT(FROM_UNIXTIME(field_data_field_todo_due_date_singledate.field_todo_due_date_singledate_value), '%Y-%m-%d') >= :node_date_argument AND DATE_FORMAT(FROM_UNIXTIME(field_data_field_todo_due_date_singledate.field_todo_due_date_singledate_value), '%Y-%m') <= :node_date_argument1";

      // Get the date given by the calendar.
      $date = $view->query->where['date']['conditions'][0]['value'][':node_date_argument'];

      // Subtract one day from the date to allow the missing items
      // to be viewed.
      $new_date                                                                    = (date('Y-m-d', strtotime($date . ' this year -1 day')));
      $view->query->where['date']['conditions'][0]['value'][':node_date_argument'] = $new_date;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function openlucius_core_form_alter(&$form, &$form_state, $form_id) {

  global $user;

  $menu_item = menu_get_item();
  $view      = views_get_current_view();

  // We don't want a client or standard user to have perms here.
  if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {

    // Add extra validation.
    $form['#validate'][] = 'openlucius_core_profile_validate';

    // Notify is usually needed, check it by default.
    $form['account']['notify']['#default_value'] = 1;
    $form['actions']['cancel']['#access']        = FALSE;

    // If a user user is editing another user pass an extra hidden parameter
    // to prevent them from accidentally removing that user from groups.
    if (isset($form['#user']->uid) && $form['#user']->uid !== $user->uid) {
      $form['edit_user_profile'] = array(
        '#type'  => 'hidden',
        '#value' => TRUE,
      );
    }

    // Add select for non super admin.
    if ($user->uid != 1) {
      // Replace checkboxes for 'single role'.
      $user_roles2 = $form['account']['roles'];
      // Replace title.
      $user_roles2['#title'] = t('Role');
      // Replace.
      $form['account']['roles2']          = $user_roles2;
      $form['account']['roles2']['#type'] = 'checkboxes';
	  dpm($form['account']);

      // Set client to default on empty.
      if (empty($form['account']['roles']['#default_value'])) {
        // Set default to client.
        $form['account']['roles']['#default_value'][OPENLUCIUS_CORE_OPENLUCIUS_DEFAULT_ROLE]  = OPENLUCIUS_CORE_OPENLUCIUS_DEFAULT_ROLE;
        $form['account']['roles2']['#default_value'][OPENLUCIUS_CORE_OPENLUCIUS_DEFAULT_ROLE] = OPENLUCIUS_CORE_OPENLUCIUS_DEFAULT_ROLE;
      }

      // Add warning message.
      $form['hidden_message']['hidden_message'] = array(
        '#type'  => 'hidden',
        '#value' => t('Changing a user to client will remove them from all non client groups. Are you sure?'),
      );
    }

    if (!user_access('administer users')) {
      $form['field_user_company']['#access'] = FALSE;
      $form['field_user_teams']['#access']   = FALSE;
      $form['field_groups']['#access']       = FALSE;

      // Unset "Language settings" for now.
      $form['locale']['#access'] = FALSE;
    }

    // Hide roles for non administrative users.
    if (!in_array('admin', $user->roles) && !in_array('can create groups', $user->roles) && $user->uid != 1) {
      $form['account']['roles']['#access'] = FALSE;
    }

    // Only super can change admin language and language.
    if ($user->uid != 1) {

      // Hide admin language and locale.
      foreach (array('admin_language', 'locale') as $key) {
        // Check if key isset.
        if (isset($form[$key])) {
          $form[$key]['#access'] = 0;
        }
      }
    }

    // Remove admin role if not admin or super.
    if (!in_array('admin', $user->roles) && $user->uid != 1) {
      // Only admin can make people admin.
      foreach ($form['account']['roles']['#options'] as $key => $value) {
        if ($value == 'admin') {
          $adminkey = $key;
        }

        if (!empty($adminkey)) {
          unset($form['account']['roles']['#options'][$adminkey]);
          if (isset($form['account']['roles2'])) {
            unset($form['account']['roles2']['#options'][$adminkey]);
          }
        }
      }
    }
  }

  // Place loop-in in a fieldset for node/adds.
  if (isset($form['field_shared_loopin_email'])) {
    $form['field_shared_loopin_email']['#type']        = 'fieldset';
    $form['field_shared_loopin_email']['#weight']      = 2100;
    $form['field_shared_loopin_email']['#title']       = t('E-mail externals');
    $form['field_shared_loopin_email']['#collapsible'] = 1;
    $form['field_shared_loopin_email']['#collapsed']   = 1;
  }

  // We are in a node/add/ or node/edit form.
  if (isset($form['#node_edit_form']) && $form['#node_edit_form'] == 1) {

    // If we are on the edit form.
    if ($form['nid']['#value'] != NULL) {
      // TODO make Drupal.t work in jQuery this is unnecessary.
      if ($form_id == 'ol_group_node_form') {
        // Add hidden text to form.
        $form['hidden_message'] = array(
          '#type'  => 'hidden',
          '#value' => t('By changing this group to a group without clients, all clients will be removed. Are you sure?'),
        );
      }

      // Check if set.
      if (isset($form['field_shared_group_reference'])) {
        if ($user->uid != 1) {
          // There should be no altering of groups!.
          $form['field_shared_group_reference']['#attributes']['style'] = array('display: none;');
          $form['field_shared_group_reference']['#disabled']            = TRUE;
        }
      }
    }

    // No revision info needed for now.
    $form['revision_information']['#access'] = 0;

    // Check if we are adding a new piece of content in a group.
    if (isset($form['#node_edit_form']) && $form['#node_edit_form'] && isset($form['nid']) && $form['nid']['#value'] == NULL) {

      // Check Group: is client access set to "Yes"? Load Group data.
      if (isset($menu_item['page_arguments'][1])) {
        $group_node = node_load($menu_item['page_arguments'][1]);
      }

      if (!empty($group_node)) {
        if ($form['type']['#value'] != 'ol_group' && isset($form['field_shared_show_clients'])) {

          $wrapper = entity_metadata_wrapper('node', $group_node);
          // Hide if 0.
          if (!$wrapper->field_shared_show_clients->value()) {
            $form['field_shared_show_clients'][LANGUAGE_NONE]['#default_value'] = 0;
            $form['field_shared_show_clients']['#attributes']['style']          = array('display: none;');
          }

          // Hide 'show this to client' element for clients.
          if (openlucius_core_user_is_client()) {
            $form['field_shared_show_clients']['#attributes']['style'] = array('display: none;');
          }

          $form['field_shared_group_reference']['#attributes']['style'][]        = 'display:none;';
          $form['field_shared_group_reference'][LANGUAGE_NONE]['#default_value'] = $group_node->nid;
        }
      }
    }

    // Check if we are editing a piece of content in a group.
    if (isset($form['#node_edit_form']) && $form['#node_edit_form'] && isset($form['nid']) && $form['nid']['#value'] != NULL) {

      if ($form['type']['#value'] != 'ol_group' && isset($form['field_shared_show_clients'])) {
        // Check Group: is client access set to "Yes"? Load Group data.
        $menu_object = menu_get_object();
        if (!empty($menu_object) && isset($menu_object->type)) {
          // Get the node wrapper.
          $node_wrapper = entity_metadata_wrapper('node', $menu_object);
          // Get the node group id.
          $node_group_id = $node_wrapper->field_shared_group_reference->value()->nid;
          $loaded_node   = node_load($node_group_id);
          $wrapper       = entity_metadata_wrapper('node', $loaded_node);

          // Hide 'show this to client' element for Clients.
          if (!$wrapper->field_shared_show_clients->value() && $user->uid != 1) {
            $form['field_shared_show_clients'][LANGUAGE_NONE]['#default_value'] = 0;
            $form['field_shared_show_clients']['#attributes']['style']          = array('display: none;');
          }
          if (user_access('openlucius client')) {
            $form['field_shared_show_clients']['#attributes']['style'] = array('display: none;');
          }
        }
      }
    }
  }

  // Check if node form.
  if (stristr($form_id, 'node_form')) {

    // Hide these items for clients on creation.
    if (openlucius_core_user_is_client()) {
      $fields = array(
        'field_todo_due_date_singledate',
        'field_todo_label',
        'field_todo_list_reference',
        'field_todo_user_reference',
        'field_shared_loopin_email',
        'field_todo_comm_show_clients',
        'field_shared_time_maximum',
        'field_todo_invoice_number',
      );

      foreach ($fields as $field) {
        if (isset($form[$field])) {
          $form[$field]['#attributes']['style'] = array('display: none;');
        }
      }
    }

    // Check the title.
    if (isset($form['title'])) {
      // If we are editing a file node, always add the title "Files".
      if ($form['type']['#value'] == "file") {
        $form['title']['#default_value'] = t("Files");
      }
      elseif ($form['title']['#default_value'] == '') {
        $form['title']['#default_value'] = strip_tags(t('New !type', array('!type' => node_type_get_name($form['type']['#value']))));
      }
    }

    // Hide and disable.
    if (isset($form['field_todo_weight'])) {
      $form['field_todo_weight']['#attributes']['style'] = array('display: none;');
      $form['field_todo_weight']['#disabled']            = TRUE;
    }

    // Check for group reference field.
    // There are certain lists with more than 2 options these should not be
    // disabled.
    if (isset($form['field_shared_group_reference']) && count($form['field_shared_group_reference'][LANGUAGE_NONE]['#options']) <= 2) {
      // Get correct key, as the reference only contains one valid key grab
      // array keys and use second option.
      $keys = array_keys($form['field_shared_group_reference'][LANGUAGE_NONE]['#options']);
      if (isset($keys[1])) {
        $form['field_shared_group_reference'][LANGUAGE_NONE]['#default_value'] = $keys[1];
      }
      else {
        $form['field_shared_group_reference'][LANGUAGE_NONE]['#default_value'] = $keys[0];
      }

      // Disable field.
      $form['field_shared_group_reference']['#disabled'] = TRUE;

      // Replace cursor as this is just weird.
      $form['field_shared_group_reference']['#attributes']['style'][] = 'cursor: no-drop;';
    }

    // Only assign to users in this group / add default list using url param.
    if (stristr($form_id, 'ol_todo_node_form')) {

      // Chek if the group id was stored in the form_state.
      if (!isset($form_state['openlucius_core']['group_id'])) {

        // Load from form if possible.
        if (isset($form['#node']) && isset($form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]['nid'])) {
          $group_id = $form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
        }
        // This should happen on node/add.
        else {
          $group_id = $menu_item['page_arguments'][1];
        }
        $form_state['openlucius_core']['group_id'] = $group_id;
      }
      $group_id = $form_state['openlucius_core']['group_id'];

      // Filter the lists.
      if (isset($group_id)) {
        $form['field_todo_list_reference'][LANGUAGE_NONE]['#options'] = openlucius_core_get_lists_in_group($group_id);
      }

      // Check url for default list.
      if (!empty($menu_item['page_arguments'][2])) {
        $form['field_todo_list_reference'][LANGUAGE_NONE]['#default_value'] = $menu_item['page_arguments'][2];
      }
    }
  }

  // For comments and node_form.
  if (stristr($form_id, 'comment') || (stristr($form_id, 'node_form') && isset($form['type']) && in_array($form['type']['#value'], openlucius_core_get_content_types()))
  ) {
    $form['field_wrapper'] = array(
      '#type'       => 'fieldset',
      '#attributes' => array(
        'class' => array('notifies'),
      ),
      '#weight'     => 100,
    );

    $plus_icon  = '<span class="glyphicon glyphicon-plus-sign"></span>';
    $minus_icon = '<span class="glyphicon glyphicon-minus-sign"></span>';
    $uncheck    = '<span class="uncheck-all hidden">' . t('Uncheck all') . $minus_icon . '</span>';

    // Add notify to node_form.
    $form['field_wrapper']['notify_individual_fieldset'] = array(
      '#type'       => 'fieldset',
      '#title'      => t('Notify Users') . '<span class="check-all">' . t('Select all') . $plus_icon . '</span>' . $uncheck,
      '#attributes' => array(
        'class' => array('inividual-fieldset'),
      ),
      '#weight'     => 8,
    );

    // Initiate empty.
    $node_id = NULL;

    if (!isset($form_state['openlucius_core']['node_id'])) {
      // These switch from url to url.
      if ($menu_item['page_callback'] == 'node_add') {
        $node_id = $menu_item['page_arguments'][1];
      }
      elseif ($menu_item['page_callback'] == 'node_page_edit' && isset($form['field_shared_group_reference'][LANGUAGE_NONE]['#default_value'][0])
      ) {
        $node_id = $form['field_shared_group_reference'][LANGUAGE_NONE]['#default_value'][0];
      }
      else {
        if (isset($form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]['nid'])) {
          $node_id = $form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
        }
      }

      // Check if NULL.
      if ($node_id == NULL) {
        if (!empty($menu_item['page_arguments'][1]) && is_numeric($menu_item['page_arguments'][1])) {
          $node_id = $menu_item['page_arguments'][1];
        }
        // Last but not least try the session value.
        if ($node_id == NULL) {
          $node_id = $_SESSION['active_group'];
        }
      }
      $form_state['openlucius_core']['node_id'] = $node_id;
    }

    $node_id = $form_state['openlucius_core']['node_id'];

    // Fetch all users.
    $all_users = openlucius_core_fetch_users('group', $node_id);

    // Initiate array.
    $options = array();

    // Loop through all users.
    foreach ($all_users as $key => $item) {
      if (!empty($item->realname)) {
        // Set realname.
        $options[$key] = check_plain($item->realname);
      }
      else {
        // Set username.
        $options[$key] = check_plain($item->name);
      }
    }

    $form['field_wrapper']['notify_individual_fieldset']['notify_individual'] = array(
      '#type'    => 'checkboxes',
      '#options' => $options,
      '#weight'  => 10,
    );

    $form['field_wrapper']['team_companies'] = array(
      '#type'       => 'fieldset',
      '#title'      => t('Notify Teams'),
      '#attributes' => array(
        'class' => array('team-companies'),
      ),
      '#weight'     => 9,
    );

    // No passing by reference.
    $teams = openlucius_core_fetch_all_of_type('team');

    // Initiate empty array.
    $options = array();

    // Initiate array.
    $form['hidden_teams'] = array();

    // Loop through teams.
    foreach ($teams as $team_key => $team_item) {

      if (isset($team_item)) {
        // Fetch team users.
        $_users = openlucius_core_fetch_users('team', $team_key);

        // Add to options, for checkboxes this is not sanitized.
        $options['team_' . $team_key] = check_plain($team_item);

        // Place in hidden element for js.
        $form['hidden_teams']['team_' . $team_key] = array(
          '#type'  => 'hidden',
          '#value' => implode(',', array_keys($_users)),
        );
      }
    }

    $form['field_wrapper']['team_companies']['items'] = array(
      '#type'    => 'checkboxes',
      '#options' => $options,
    );

    $form['actions']['#weight'] = 9000;
  }

  // Code for disabling the open and closed status in the todo vocabulary.
  // Get the variable values for the open and closed taxonomy terms.
  $closed_term = taxonomy_term_load(variable_get('todo_openstatus_tid'))->tid;
  $open_term   = taxonomy_term_load(variable_get('todo_closedstatus_tid'))->tid;

  // If at the taxonomy vocabulary (with terms listed).
  if ($form_id == 'taxonomy_overview_terms') {

    // Add the do not remove text to these two terms.
    $form['tid:' . $open_term . ':0']['view']['#title'] .= ' (' . t('OpenLucius core status, do not remove') . ')';
    $form['tid:' . $closed_term . ':0']['view']['#title'] .= ' (' . t('OpenLucius core status, do not remove') . ')';

    // Unset the edit button for the open and closed term.
    $form['tid:' . $open_term . ':0']['edit']['#access']   = FALSE;
    $form['tid:' . $closed_term . ':0']['edit']['#access'] = FALSE;
  }

  // Check for exposed form on group-calendar page.
  if ($form_id == 'views_exposed_form' && isset($view->name) && $view->name == 'group_calendar' && isset($view->args[1])
  ) {

    // The group id provided in the url.
    $group_id = $view->args[1];

    // Get the users in this active group.
    $users_in_group = openlucius_core_fetch_users('group', $group_id);

    // Loop through users and rebuild new array.
    foreach ($users_in_group as $users) {
      $assigned_array[$users->uid] = $users->name;
    }

    // Initiate the all value since it's needed.
    $assigned_array['All'] = '- ' . t('Any') . ' -';

    // Sort the array keys.
    ksort($assigned_array);

    // Rebuild the options to pick.
    $form['field_todo_user_reference_uid']['#options'] = $assigned_array;
  }

  // Form alter for node/add Todo's:.
  // We don't want the type fields if there are no terms in that vocabulary.
  // TODO move all of this and other alters to
  // their hook_form_BASE_FORM_ID_alters.
  if ($form_id == 'ol_todo_list_node_form') {

    // $fixme: need to be language independent
    // Count the terms.
    $term_count = count($form['field_todolist_type'][LANGUAGE_NONE]['#options']);

    // If there is <=1 option ('none' counted), hide the field (there is no
    // term added in this voc).
    if ($term_count <= 1) {
      $form['field_todolist_type']['#access'] = FALSE;
    }
  }

  // We don't want clients to access the notify and loop-in e-mailing fields.
  // We do this to prevent clients from spamming.
  // Check if we are on node/add page.
  if (isset($form['#node_edit_form'])) {
    if (!user_access('ol show non-client content', $user)) {
      // Hide the loop-in e-mail wrapper.
      $form['field_shared_loopin_email']['#access'] = FALSE;
      // Hide the notify wrapper.
      $form['field_wrapper']['#access'] = FALSE;
    }
  }

  // We don't want the possibility to send a loop-in e-mail on node/edit.
  // Removed the field there.
  if ($menu_item['page_callback'] == 'node_page_edit' && isset($form['field_shared_loopin_email'])) {
    // Hide the loop-in e-mail wrapper.
    $form['field_shared_loopin_email']['#access'] = FALSE;
  }

  // Removal of users from groups can only be done via /group-users.
  // Remove the 'groups' field from user/edit.
  if (isset($form['#user']->name) && $user->uid != 1) {
    // Remove the groups field.
    $form['field_groups']['#access'] = FALSE;
  }

  if ($form_id == 'openlucius_core_add_todo_form') {
    $form['todo_title']['#attributes']['placeholder'] = $form['todo_title']['#title'];
    $form['todo_title']['#title_display']             = 'invisible';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function openlucius_core_form_comment_node_ol_todo_form_alter(&$form, &$form_state, $form_id) {
  $menu_item = menu_get_item();

  // Load from form if possible.
  if (isset($form['#node']) && isset($form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]['nid'])) {
    $group_id = $form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
  }
  // This should happen on node/add.
  else {
    $group_id = $menu_item['page_arguments'][1];
  }

  $form['field_todo_list_reference'][LANGUAGE_NONE]['#options'] = openlucius_core_get_lists_in_group($group_id);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function openlucius_core_form_user_register_form_alter(&$form, &$form_state, $form_id) {

  // Hide unpublished Groups.
  foreach ($form['field_groups'][LANGUAGE_NONE]['#options'] as $gid => $gname) {

    // Check Group status.
    $result = db_select('node', 'n')
      ->fields('n', array('status'))
      ->condition('n.nid', $gid, '=')
      ->execute()
      ->fetchField();

    // If Group is unpublished (archived), unset the gid.
    if ($result == '0') {
      unset($form['field_groups'][LANGUAGE_NONE]['#options'][$gid]);
    }
  }

  // Select groups that users are automatically added in.
  if ($form_id == 'user_register_form') {

    // Initialize the list for the groups.
    $group_list = array();

    // Get the selected groups from group/team configuration.
    $groups = variable_get('openlucius_core_groups', '');

    // Loop through the groups.
    foreach ($groups as $id => $boolean) {

      // Check if the group is selected.
      if ($boolean !== 0) {

        // Add the group to the list.
        $group_list[$id] = $id;
      }
    }

    if (isset($group_list) && is_array($group_list) && !empty($group_list)) {
      // Set the default value to select the required checkboxes.
      $form['field_groups'][LANGUAGE_NONE]['#default_value'] = array_values($group_list);
    }

    // Initialize the list for the teams.
    $team_list = array();
    // Get the selected teams from group/team configuration.
    $teams = variable_get('openlucius_core_teams', '');
    // Loop through the groups.
    foreach ($teams as $id => $boolean) {
      // Check if the group is selected.
      if ($boolean !== 0) {
        // Add the group to the list.
        $team_list[$id] = $id;
      }
    }

    if (isset($team_list) && is_array($team_list) && !empty($team_list)) {
      // Set the default value to select the required checkboxes.
      $form['field_user_teams'][LANGUAGE_NONE]['#default_value'] = array_values($team_list);
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function openlucius_core_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Hide hash for non super admin.
  if ($user->uid != 1) {
    $form['field_user_hash']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function openlucius_core_form_ol_todo_node_form_alter(&$form, &$form_state, $form_id) {
  // Fetch the active menu_item.
  $menu = menu_get_item();

  // Fetch group id from either menu or form (on edit).
  $group_id = isset($menu['page_arguments'][1]) ? $menu['page_arguments'][1] : (isset($form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]) ? $form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]['nid'] : 0);

  // Check if the argument is numeric.
  if (is_numeric($group_id)) {

    // Load all users in this group and replace the existing options.
    $users_in_group = openlucius_core_fetch_users('group', $group_id);
    $options        = array('_none' => '- ' . t('None') . ' -');

    // Add those users to the options.
    foreach ($users_in_group as $entity) {
      $options[$entity->uid] = $entity->name;
    }
    $form['field_todo_user_reference'][LANGUAGE_NONE]['#options'] = $options;
  }
}

/**
 * Implements hook_form_submit().
 */
function openlucius_core_comment_node_ol_todo_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  // Loop all the values in the form.
  foreach ($values as $key => $value) {
    // Check if its a field and the field is allowed to be altered.
    if (strpos($key, 'field_') === 0 && !in_array($key, $values['comment_alter']['fields'])) {
      // It is not allowed to be altered, unset it from the node
      // to prevent overwriting values with shared fields.
      if (isset($form_state['node']->$key)) {
        unset($form_state['node']->$key);
      }
      if (isset($form['#node']->$key)) {
        unset($form['#node']->$key);
      }
    }
  }
}

/**
 * Implements hook_node_access_records().
 */
function openlucius_core_node_access_records($node) {
  if ($node) {
    // Get 'show clients' field.
    $items = field_get_items('node', $node, 'field_shared_show_clients');

    // Default to zero for now.
    $client_switch = 0;
    // Check if set.
    if ($items != FALSE) {
      foreach ($items as $item) {
        $client_switch = $item['value'];
      }
    }

    // Initialise grants array.
    $grants                = array();
    $openlucius_core_types = openlucius_core_get_content_types();

    // We start with setting grants for group.
    if ($node->type == "ol_group") {

      $grants[] = array(
        'realm'        => 'openlucius_core_node_access_view',
        'gid'          => $node->nid,
        'grant_view'   => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority'     => 0,
      );
      // Add extra realm for non-client groups.
      if ($client_switch == 0) {
        $grants[] = array(
          'realm'        => 'openlucius_core_node_access_view_nonclients',
          'gid'          => $node->nid,
          'grant_view'   => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority'     => 10,
        );
      }
    }

    // So now we've done Groups, it's time for other content types.
    // We need the Group reference nid from these guys, not nid.
    // Companies and teams are not referenced to a group in this context, skip
    // them.
    elseif (in_array($node->type, $openlucius_core_types)) {
      // Get reference fields value.
      $items = field_get_items('node', $node, 'field_shared_group_reference');
      foreach ($items as $item) {
        $nid = $item['nid'];
      }

      // Security message, when nid does not exist, there is no Group
      // referenced, that can't be in OpenLucius.
      if (!$nid) {
        drupal_set_message(t("Security Warning! This node is inconsistent with the OpenLucius Grants system") . ' ' . l($node->title, "node/" . $node->nid), "error");
      }

      // Set Grants.
      else {
        $grants[] = array(
          'realm'        => 'openlucius_core_node_access_view',
          'gid'          => $nid,
          'grant_view'   => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority'     => 0,
        );
        $grants[] = array(
          'realm'        => 'openlucius_core_node_access_edit',
          'gid'          => $nid,
          'grant_view'   => 1,
          'grant_update' => 1,
          'grant_delete' => 0,
          'priority'     => 0,
        );
        // Add extra realm for non-client nodes.
        if ($client_switch == 0) {
          $grants[] = array(
            'realm'        => 'openlucius_core_node_access_view_nonclients',
            'gid'          => $nid,
            'grant_view'   => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority'     => 10,
          );
          $grants[] = array(
            'realm'        => 'openlucius_core_node_access_edit_nonclients',
            'gid'          => $nid,
            'grant_view'   => 1,
            'grant_update' => 1,
            'grant_delete' => 0,
            'priority'     => 10,
          );
        }
      }
    }

    return $grants;
  }
}

/**
 * Implements hook_node_grants().
 */
function openlucius_core_node_grants($account, $op) {

  // Initialize as NULL.
  $user = NULL;

  // Load user entity.
  if ($account->uid != 0) {
    $user = user_load($account->uid);
  }
  elseif (isset($_GET['hash'])) {
    $uid  = openlucius_core_hash_to_uid();
    $user = user_load($uid);
  }

  // Initialize empty array and fill using user field if we have a user.
  $group_ids = array();
  if ($user !== NULL) {
    // Load groups that user is granted.
    $group_ids = field_get_items('user', $user, 'field_groups');
  }

  // Provide the user his group grants.
  $grants = array();

  if (!empty($group_ids)) {
    foreach ($group_ids as $data) {

      // Grants access for non-client nodes.
      if (user_access("ol show non-client content")) {
        $grants['openlucius_core_node_access_view_nonclients'][] = $data['nid'];
      }
      if (user_access("create ol_group content")) {
        // Check if Group is Archived, then don't give edit perms.
        // @TODO: for efficiency, do custom query.
        $groupnode = node_load($data['nid']);
        if (isset($groupnode->status) && $groupnode->status == 1) {
          $grants['openlucius_core_node_access_edit'][]            = $data['nid'];
          $grants['openlucius_core_node_access_edit_nonclients'][] = $data['nid'];
        }
      }
      // Grants access for all other the nodes in users group.
      $grants['openlucius_core_node_access_view'][] = $data['nid'];
    }
  }
  else {
    // Check if we can tell if this is triggered for a search index call.
    // TODO figure out whether this is the only way, this is really slow.
    $e     = new Exception();
    $trace = $e->getTrace();

    // Loop through all function calls before this one.
    foreach ($trace as $item) {

      // Check if this is called by the comment_node_update_index function.
      // As only comments seem to be missing from the index.
      if ($item['function'] == 'comment_node_update_index') {
        $group_ids = openlucius_core_fetch_groups();

        // Grant view access to all nodes.
        foreach ($group_ids as $nid) {
          $grants['openlucius_core_node_access_view_nonclients'][] = $nid;
          $grants['openlucius_core_node_access_view'][]            = $nid;
        }
      }
    }
  }

  // Tell good old Drupal about users grants.
  return $grants;
}

/**
 * Function to fetch all groups within the openlucius environment.
 * @return array
 *   Returns all available groups.
 */
function openlucius_core_fetch_groups() {
  $groups = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'ol_group', '=')
    ->execute()
    ->fetchAllKeyed(0, 0);

  return array_keys($groups);
}

/**
 * Implements hook_user_presave().
 */
function openlucius_core_user_presave(&$edit, $account, $category) {
  global $user;

  // If the user didn't have the client role. And is getting the client role.
  if (!isset($account->original->roles[OPENLUCIUS_CORE_OPENLUCIUS_CLIENT_ROLE]) && $edit['roles'][OPENLUCIUS_CORE_OPENLUCIUS_CLIENT_ROLE] != 0) {
    // Fetch all non client groups with this user in them.
    $query = db_select('field_data_field_groups', 'f')
      ->fields('f', array('field_groups_nid'))
      ->condition('f.entity_id', $account->uid, '=')
      ->condition('f2.field_shared_show_clients_value', 0, '=');

    $query->join('field_data_field_shared_show_clients', 'f2', 'f.field_groups_nid = f2.entity_id');
    $result = $query->execute()->fetchAllKeyed(0, 0);
    $groups = array_keys($result);

    // Loop through user groups.
    foreach ($account->field_groups[LANGUAGE_NONE] as $key => $group) {
      // Check if in non client array.
      if (in_array($group['nid'], $groups)) {
        unset($account->field_groups[LANGUAGE_NONE][$key]);
      }
    }

    // Replace field_groups.
    $edit['field_groups'][LANGUAGE_NONE] = $account->field_groups[LANGUAGE_NONE];
  }

  // Check if the user editing the profile is the user him/herself.
  // Other users may not have the same groups as the editor. (Grants issue)
  // This may lead to a loss of groups if an admin is not in that group.
  if ($user->uid != 1 && isset($edit['edit_user_profile']) && $edit['edit_user_profile'] && $user->uid !== $account->uid && isset($account->original)) {
    $edit['field_groups'] = $account->original->field_groups;
  }

  // Check if the user has a hash, if not generate a hash.
  if (empty($edit['field_user_hash'][LANGUAGE_NONE])) {
    $edit['field_user_hash'][LANGUAGE_NONE][0]['value'] = sha1(microtime() . $edit['name']);
  }
}

/**
 * Implements hook_node_update().
 */
function openlucius_core_node_update($node) {

  // Reset the cache.
  entity_get_controller('node')->resetCache(array($node->nid));

  // Change client settings for sub-nodes.
  if ($node->type == 'ol_group' || $node->type == 'ol_todo_list') {
    $node_children_update_required = $close_todos = FALSE;

    // Check if we need to update the child todos.
    if (isset($node->op) && isset($node->unpublish) && $node->op == $node->unpublish) {
      $close_todos                   = TRUE;
      $node_children_update_required = TRUE;
    }

    $client_access = $node->field_shared_show_clients[LANGUAGE_NONE][0]['value'];

    // If the previous value was TRUE And the new value is FALSE.
    if ($node->original->field_shared_show_clients[LANGUAGE_NONE][0]['value'] == 1
        && $node->field_shared_show_clients[LANGUAGE_NONE][0]['value'] == 0
    ) {
      openlucius_core_remove_clients($node->nid);
      $node_children_update_required = TRUE;
    }

    // If the child nodes need to be updated.
    if ($node_children_update_required) {

      // Group specific query.
      if ($node->type == 'ol_group') {

        // Get all nodes related to this group.
        $results = db_select('field_data_field_shared_group_reference', 'f')
          ->fields('f', array('entity_id'))
          ->condition('f.field_shared_group_reference_nid', $node->nid, '=')
          ->execute()
          ->fetchAll();
      }

      // Todo list specific query.
      else {
        // Get all todo nodes related to this todo-list.
        $results = db_select('field_data_field_todo_list_reference', 'f')
          ->fields('f', array('entity_id'))
          ->condition('f.field_todo_list_reference_nid', $node->nid, '=')
          ->execute()
          ->fetchAll();
      }

      // Loop through nodes.
      foreach ($results as $result) {

        // Use wrapper to alter field.
        $node_wrapper = entity_metadata_wrapper('node', $result->entity_id);

        // Change the show clients field to the new status.
        $node_wrapper->field_shared_show_clients->set($client_access);

        // Close todos if set.
        if ($close_todos) {
          if ($node_wrapper->__isset('field_todo_label')) {
            $node_wrapper->field_todo_label->set(variable_get('todo_closedstatus_tid'));
          }
        }

        // Save node.
        $node_wrapper->save();
      }
    }
  }

  // Send update notification.
  openlucius_notifications_notify_users($node);
}

/**
 * Implements hook_node_insert().
 */
function openlucius_core_node_insert($node) {
  // Get user.
  global $user;

  // Send insert notification.
  openlucius_notifications_notify_users($node);
  openlucius_notifications_send_loopin_mails(NULL, NULL, $node);

  // Check if type is group, if so add creator.
  if ($node->type == 'ol_group') {

    // Load user.
    $account = user_load($user->uid);

    // Get user wrapper, for easy-mode adding.
    $user_wrapper = entity_metadata_wrapper('user', $account);

    // Add user to group.
    $user_wrapper->field_groups[] = $node;

    // Save wrapper.
    $user_wrapper->save();

    // Save user.
    user_save($account);
  }
}

/**
 * Implements hook_node_delete().
 */
function openlucius_core_node_delete($node) {

  // Check if the node type is set and is a 'team'.
  if (isset($node->type) && $node->type == 'team') {

    $users = db_select('field_data_field_user_teams', 'f')
      ->fields('f', array('entity_id'))
      ->condition('entity_type', 'user', '=')
      ->condition('bundle', 'user', '=')
      ->condition('field_user_teams_nid', $node->nid, '=')
      ->execute()
      ->fetchAll();

    // Loop through the users and unset the team.
    foreach ($users as $item) {

      $user_object = user_load($item->entity_id);
      $teams       = &$user_object->field_user_teams[LANGUAGE_NONE];

      // Loop through the teams.
      foreach ($teams as $key => $team) {
        if ($team['nid'] === $node->nid) {
          unset($teams[$key]);
        }
      }

      // Save the user.
      user_save($user_object);
    }
  }
}

/**
 * Implements hook_block_info().
 */
function openlucius_core_block_info() {

  // Initialize array.
  $blocks = array();

  // Ol group heading block.
  $blocks['ol_group_heading'] = array(
    'info' => t('Openlucius group heading'),
  );
  // Ol group heading block.
  $blocks['ol_textdoc'] = array(
    'info' => t('Text document'),
  );
  // Ol list with my groups.
  $blocks['ol_mygroups']  = array(
    'info' => t('My Groups'),
  );
  $blocks['recent_stuff'] = array(
    'info' => t('Recent stuff'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function openlucius_core_block_view($delta = '') {

  // Initialize array.
  $block = array();

  switch ($delta) {
    // OL group heading block with buttons.
    case 'ol_group_heading':
      $block['subject'] = NULL;
      $block['content'] = openlucius_core_heading_content();
      break;

    case 'ol_textdoc':
      $block['subject'] = '<none>';
      $block['content'] = openlucius_core_textdocblock();
      break;

    case 'ol_mygroups':
      $block['subject'] = t('My Groups');
      $block['content'] = openlucius_core_mygroupsblock();
      break;

    case 'recent_stuff':
      $block['subject'] = t('Recent stuff');
      $block['content'] = openlucius_core_get_recent_stuff();
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function openlucius_core_theme() {
  return array(
    'openlucius_core_button'            => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_button',
    ),
    'openlucius_core_textdoc'           => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_textdoc',
    ),
    'openlucius_core_add_todo'          => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_add_todo',
    ),
    'openlucius_core_my_groups'         => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_my_groups',
    ),
    'openlucius_core_recent_stuff_item' => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_recent_stuff_item',
    ),
    'openlucius_core_recent_stuff'      => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_recent_stuff',
    ),
    'openlucius_core_help_block'        => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_help_block',
    ),
  );
}

/**
 * Function for views access.
 */
function openlucius_core_views_group_access($account = NULL) {

  // The logged in user.
  global $user;

  // Admins may see all.
  if ($user->uid == 1 || user_access('bypass node access')) {
    return TRUE;
  }

  // Check if this function is being called from group-users.
  if (strpos(current_path(), 'group-users') !== FALSE) {
    return openlucius_core_user_in_group(str_replace('group-users/', '', current_path()), $user->uid);
  }

  return FALSE;
}

/**
 * Function for views access.
 */
function openlucius_core_views_ical_access($account = NULL) {

  // Try to obtain a uid from the url hash parameter.
  $uid = openlucius_core_hash_to_uid();

  // Check if we have a valid uid.
  if (!empty($uid)) {
    // TODO menu_get_item and menu_get_object cannot be called here.
    // TODO Try to find another method.
    $query     = filter_xss($_GET['q']);
    $arguments = explode('/', $query);

    // Check if the third argument is a node.
    if (isset($arguments[3]) && ($node = node_load($arguments[3])) && $node->type == 'ol_group') {

      // We're in a group so check if this user $uid may access the group.
      if (openlucius_core_user_in_group($node->nid, $uid)) {
        return TRUE;
      }
    }
    else {
      // TODO add access for global calendar.
    }
  }

  return FALSE;
}

/**
 * Implements hook_exit().
 */
function openlucius_core_exit($destination = NULL) {
  // Set variable to FALSE for new page-loads.
  if (variable_get('archived_message', FALSE)) {
    variable_set('archived_message', FALSE);
  }
}

/**
 * Custom select for groups.
 */
function openlucius_core_get_group_selector() {

  // The logged in user.
  global $user;

  // The user account.
  $account = user_load($user->uid);

  return openlucius_core_reference_select($account->field_groups[LANGUAGE_NONE], 'group_selector');
}

/**
 * Function to build a select from entity references.
 *
 * @param array[] $items
 *   The items to put into the select.
 * @param string $id
 *   The id to target, the select has nothing by itself.
 *
 * @return bool
 *   Build version of the select.
 */
function openlucius_core_reference_select($items, $id = "") {

  // Check if not empty.
  if (count($items) > 0) {

    // Create build for rendering.
    $build = array(
      '#type'       => 'select',
      '#attributes' => array(
        'class'            => array(
          'selectpicker',
        ),
        'data-live-search' => 'true',
        'data-width'       => 'auto',
      ),
    );

    // Add id if not empty.
    if ($id != '') {
      $build['#attributes']['id'] = $id;
    }

    // Initialize array.
    $options = array();

    // Loop through items.
    foreach ($items as $item) {

      // Fetch title.
      $title = openlucius_core_fetch_node_title($item['nid']);

      if ($title) {
        // Build path.
        $path           = url('node/' . $item['nid']);
        $options[$path] = $title;
      }
    }

    // Sort if not empty.
    if (!empty($options)) {
      asort($options);
    }
    $options = array_merge(array(url('<front>') => t('Groups')), $options);

    // Add options.
    $build['#options'] = $options;

    return drupal_render($build);
  }

  return FALSE;
}

/**
 * Function to remove users from group.
 *
 * @param int $gid
 *   The group id.
 * @param int $uid
 *   The user id.
 */
function openlucius_core_remove_users_from_group($gid, $uid) {

  // The logged in user.
  global $user;

  // Load user.
  $usertoremove = user_load($uid);

  // Check if user is not removing himself.
  if ($user->uid == $uid) {
    // Set message and link back.
    drupal_set_message(t("You can not remove yourself from a group"), 'warning');
    drupal_goto();
  }

  // Get user wrapper.
  $user_wrapper = entity_metadata_wrapper('user', $usertoremove);

  // Loop through references of field.
  foreach ($user_wrapper->field_groups->value() as $key => $group) {
    // Check for match.
    if ($gid == $group->nid) {
      // Match found: delete the user/group reference.
      $user_wrapper->field_groups[$key]->set(NULL);
      $user_wrapper->save();

      // Set message and link back.
      drupal_set_message(t("User %user successfully removed from Group", array('%user' => $usertoremove->name)));
      drupal_goto();
    }
  }

  // No correct match found, provide error.
  drupal_set_message(t("Error: user not removed from Group, please contact OpenLucius administrator"), 'error');
  drupal_goto();
}

/**
 * Extra redirect handler for existing paths.
 */
function openlucius_core_existing_path_redirect() {

  // The logged in user.
  global $user;

  $menu_item   = menu_get_item();
  $menu_object = menu_get_object();

  // Check for user/dashboard path.
  // if (isset($menu_item['page_arguments'][0]) && $menu_item['page_arguments'][0] == 'all_todo_lists_in_a_group' && isset($menu_item['page_arguments'][1]) && $menu_item['page_arguments'][1] == 'page_3' && !isset($menu_item['page_arguments'][2])
  // ) {
    // drupal_goto($menu_item['path'] . '/' . $user->uid);
  // }

  // Check for user-calendar/month.
  if (isset($menu_item['page_arguments'][0]) && $menu_item['page_arguments'][0] == 'group_calendar' && isset($menu_item['page_arguments'][1]) && $menu_item['page_arguments'][1] == 'page_4' && !isset($menu_item['page_arguments'][2])
  ) {
    drupal_goto($menu_item['path'] . '/' . $user->uid);
  }

  // Check for viewing a file node directly, not allowed.
  if ($menu_item['page_callback'] == 'node_page_view' && isset($menu_object->type) && $menu_object->type == 'file') {
    $node = $menu_object;
    // Redirect to the group page files where this file belongs.
    drupal_goto("group-files/" . $node->field_shared_group_reference[LANGUAGE_NONE][0]['nid']);
  }
}

/**
 * Custom redirect handler.
 */
function openlucius_core_redirect($argument = NULL) {

  // The logged in user.
  global $user;

  if ($user->uid == 0) {
    drupal_goto('user/login');
  }
  else {
    $menu_item   = menu_get_item();
    $menu_object = menu_get_object('user', 1);

    // Logged in user, redirect for menu link user/dashboard.
    if ($menu_item['load_functions'][1] == 'user_load' && !isset($menu_item['page_arguments'][1])) {
      // Redirect for other users than logged in user, who are visiting user/%.
      if ($user->uid != $menu_object->uid) {
        drupal_goto("user/dashboard/" . $menu_object->uid);
      }
      // Regular redirect to user dashboard.
      drupal_goto("user/dashboard/" . $user->uid);
    }
  }
}

/**
 * Function to check access to user edit.
 */
function openlucius_core_user_edit_access($account) {

  // The logged in user.
  global $user;

  // Do not allow other users to change root admin user.
  if ($account->uid == 1 && $user->uid != 1) {
    return FALSE;
  }

  if (user_access('administer users') || $account->uid == $user->uid) {
    return TRUE;
  }
}

/**
 * Implements hook_node_access().
 */
function openlucius_core_node_access($node, $op, $account) {
  // The logged in user.
  global $user;

  if ($op == 'create') {
    if (($node == 'ol_group' || $node == 'team' || $node == 'ol_weblink') && user_access('create ' . $node . ' content')) {
      return NODE_ACCESS_ALLOW;
    }
    elseif (isset($_SESSION['active_group']) && is_numeric($_SESSION['active_group'])) {
      $type          = str_replace('_', '-', $node);
      $stripped_path = str_replace('node/add/' . $type, '', current_path());
      if ($stripped_path == '') {
        return NODE_ACCESS_DENY;
      }
      else {
        $stripped_path = explode('/', $stripped_path);
        $group         = $stripped_path[1];
      }
    }

    if (!empty($group)) {
      // Check if user has access to group.
      if (openlucius_core_user_in_group($group, $user->uid)) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_view().
 */
function openlucius_core_node_view($node, $view_mode, $langcode) {

  // Access is differently per type.
  if ($node->type == 'ol_group') {
    // Check if archived.
    if ($node->status == 0) {
      if (!variable_get('archived_message', FALSE)) {
        drupal_set_message(t("This group is archived and locked.") . l(t("Unarchive this Group"), "archived-groups"), "warning");
        // Set to TRUE to prevent double messages.
        variable_set('archived_message', TRUE);
      }
    }
  }
  elseif (in_array($node->type, openlucius_core_get_content_types())) {
    // Get shared group reference field.
    $items = field_get_items('node', $node, 'field_shared_group_reference');
    // Check if there is a node reference.
    if (isset($items[0]['nid'])) {
      // Load the node.
      $groupnode = node_load($items[0]['nid']);

      // Handle other content for archived (unpublished) groups.
      if ($groupnode->status == 0 && !variable_get('archived_message', FALSE)) {
        drupal_set_message(t("The Group this content belongs to is archived and locked.") . l(t("Unarchive the Group"), "archived-groups"), "warning");
        // Set to TRUE to prevent double messages.
        variable_set('archived_message', TRUE);
      }
    }
  }
}

/**
 * Function to check if a user is in a group.
 *
 * @param int $gid
 *   The group id to check.
 * @param int $uid
 *   The user id.
 *
 * @return bool
 *   TRUE or FALSE
 */
function openlucius_core_user_in_group($gid, $uid) {

  // Admin is everywhere.
  if ($uid == 1) {
    return TRUE;
  }

  // Load user.
  $u              = user_load($uid);
  $user_group_ids = field_get_items('user', $u, 'field_groups');

  // Loop through group_ids.
  if (isset($user_group_ids)) {
    foreach ($user_group_ids as $data) {
      // If we have the group id we have access.
      if ($gid == $data['nid']) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Function to check if path requires login.
 */
function openlucius_core_path_access() {

  // Get the path.
  $path = request_uri();

  // Allow cron.
  if ($path == base_path() . 'cron.php?cron_key=' . variable_get('cron_key')) {
    return TRUE;
  }

  // Do not bother while installing.
  if (variable_get('install_task') != 'done') {
    return TRUE;
  }

  // Get menu item.
  $menu_item = menu_get_item();
  if ($menu_item['page_callback'] == 'user_page'
      && $menu_item['access_callback'] == 'user_is_anonymous') {
    return TRUE;
  }
  elseif ($menu_item['page_callback'] == 'drupal_get_form'
          && $menu_item['page_arguments'][0] == 'user_pass') {
    return TRUE;
  }
  elseif ($menu_item['page_callback'] == 'drupal_get_form'
          && $menu_item['page_arguments'][0] == 'user_pass_reset'
          && isset($menu_item['page_arguments'][3])
          && !empty($menu_item['page_arguments'][3])
  ) {
    return TRUE;
  }

  // Allow running Drupal from command line.
  if (drupal_is_cli()) {
    return TRUE;
  }

  // Allow access for certain arguments.
  if (in_array($menu_item['original_map'][0], array(
    'js',
    'admin_menu',
    'devel',
    'autocomplete',
  ))) {
    return TRUE;
  }

  // Added check for hash when checking for calendar.
  if ($menu_item['original_map'][0] == 'calendar' && isset($_GET['hash'])) {

    // Check if we can find a user with this hash.
    if ($uid = openlucius_core_hash_to_uid()) {

      // TODO check if there is another method to allow users to view a node.
      // Overriding grants still returns no results in the calendar view.
      global $user;
      $user = user_load($uid);
      return TRUE;
    }
  }

  // Check if user is logged in.
  if (user_is_logged_in()) {
    return TRUE;
  }

  // Return FALSE.
  return FALSE;
}

/**
 * Custom autocomplete function.
 */
function openlucius_core_autocomplete($type, $string, $string2) {

  // For safe cleaning.
  require_once drupal_get_path('module', 'ctools') . '/includes/cleanstring.inc';

  // Array for matching nodes / users.
  $matches = array();

  // Initialize variable.
  $result = NULL;

  // Different types have different queries.
  switch ($type) {

    case 'user':
      if (module_exists('realname')) {
        $result = db_query("
        SELECT u.uid as id,
        CASE
        WHEN LENGTH(r.realname) = 0
        OR r.realname IS NULL
        THEN u.name
        ELSE r.realname
        END AS title
        FROM {users} u
        INNER JOIN {realname} r
        ON u.uid = r.uid
        WHERE (lower(u.name) LIKE :like
        OR
        lower(r.realname) LIKE :like2)
        AND u.status = 1
        LIMIT 0, 5", array(
          ':like'  => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%',
          ':like2' => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%',
        ))->fetchAll();
      }
      else {
        $result = db_query("
          SELECT u.uid as id, u.name as title
          FROM {users} u
          WHERE lower(u.name) LIKE :like
          AND u.status = 1
          LIMIT 0, 5", array(':like' => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%'))->fetchAll();
      }
      break;

    case 'ol_group':
    case 'team':
      $query = db_select('node', 'n')
        ->fields('n', array('title'))
        ->condition('n.type', $type, '=')
        ->where('LOWER(n.title) LIKE :like', array(':like' => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%'));

      // Add field with alias.
      $query->addField('n', 'nid', 'id');
      $result = $query->addTag('node_access')
                      ->range(0, 5)
                      ->execute()
                      ->fetchAll();
      break;

    case 'group_user':
      if (module_exists('realname')) {
        $results = db_query("
          SELECT u.uid, r.realname, u.name
          FROM {users} u
          INNER JOIN {realname} r
          ON u.uid = r.uid
          INNER JOIN {field_data_field_groups} f
          ON u.uid = f.entity_id
          WHERE (lower(u.name) LIKE :like
          OR
          lower(r.realname) LIKE :like2)
          AND field_groups_nid = :nid
          AND u.status = 1
          LIMIT 0, 5", array(
            ':nid'   => $string,
            ':like'  => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%',
            ':like2' => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%',
          ))->fetchAll();

        // Loop through users.
        foreach ($results as $user) {
          $realname                                         = $user->realname != '' ? $user->realname : $user->name;
          $matches[$realname . ' [uid:' . $user->uid . ']'] = check_plain($realname);
        }
      }
      else {
        // Database fields.
        $query = new \EntityFieldQuery();

        // Get entities of type user which are active.
        $query->entityCondition('entity_type', 'user')
              ->propertyCondition('status', 1)
              ->fieldCondition('field_groups', 'nid', $string, '=');

        // Add property condition.
        $query->propertyCondition('name', "%" . $string2 . "%", "LIKE");

        // Store the result(s).
        $results = $query->execute();

        // Get user id's for load.
        $user_ids = array_keys($results['user']);

        // Load users.
        $users = user_load_multiple($user_ids);

        // Loop through users.
        foreach ($users as $user) {
          $matches[$user->name . ' [uid:' . $user->uid . ']'] = check_plain($user->name);
        }
      }

      // Return for JS.
      drupal_json_output($matches);

      // Do not execute the other loop and drupal_json_output.
      drupal_exit();
      break;

    // Always have a default.
    default:
      break;
  }

  // Add matches to $matches.
  foreach ($result as $row) {
    $matches[$row->title . ' (' . $row->id . ')'] = check_plain($row->title);
  }

  // Return for JS.
  drupal_json_output($matches);
}

/**
 * Function to fetch node title, will not display unpublished.
 *
 * @param int $nid
 *   The node id.
 *
 * @return string
 *   The string.
 */
function openlucius_core_fetch_node_title($nid) {
  return db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('nid', $nid, '=')
    ->condition('status', 1, '=')
    ->execute()
    ->fetchField();
}

/**
 * Function to fetch teams or companies.
 *
 * @param string $type
 *   The type to be used.
 *
 * @return array
 *   Containing (nid => title).
 */
function openlucius_core_fetch_all_of_type($type) {

  // The logged in user.
  global $user;
  // Get all values.
  $account = user_load($user->uid);
  // Get wrapper.
  $user_wrapper = entity_metadata_wrapper('user', $account);
  // For storing results.
  $results = array();

  if ($type == 'team') {
    // Loop through user teams.
    foreach ($user_wrapper->field_user_teams->value() as $team) {
      // Add result to array.
      $results[$team->nid] = $team->title;
    }
    return $results;
  }

  return FALSE;
}

/**
 * Function to remove all clients.
 *
 * @param int $gid
 *   The group id.
 */
function openlucius_core_remove_clients($gid) {
  $users_query = db_select('users_roles', 'u')
    ->fields('u', array('uid'))
    ->condition('u.rid', 5, '=')
    ->condition('f.field_groups_nid', $gid, '=');

  // Join for groups.
  $users_query->join('field_data_field_groups', 'f', 'u.uid = f.entity_id');
  $result = $users_query->execute()->fetchAllKeyed();

  // Fetch user id's.
  $uids = array_keys($result);

  // Load users.
  $users = user_load_multiple($uids);

  // Loop through users.
  foreach ($users as $user) {
    // Loop through user groups.
    foreach ($user->field_groups[LANGUAGE_NONE] as $key => $group) {
      // Check if group is correct.
      if ($group['nid'] == $gid) {
        // Unset group.
        unset($user->field_groups[LANGUAGE_NONE][$key]);
        // Save user.
        user_save($user);
        // Prevent unnecessary looping.
        break;
      }
    }
  }
}

/**
 * Implements hook_query_random_alter().
 */
function openlucius_core_query_random_alter($query) {
  $query->orderRandom();
}

/**
 * Function to fetch all users with certain settings.
 *
 * @param string $type
 *   The type to match (group, team)
 * @param int $value
 *   The value the user field must contain
 * @param bool $count
 *   If TRUE this will return a user count
 * @param bool $keyed
 *   If it should be returned with keys.
 * @param int $amount
 *   The amount of users to be fetched.
 * @param bool $random
 *   Whether the random tag should be applied.
 *
 * @return array
 *   Returns an array containing the users.
 */
function openlucius_core_fetch_users($type, $value, $count = FALSE, $keyed = FALSE, $amount = NULL, $random = NULL) {

  // Database fields.
  $fields = array(
    'group' => 'field_groups',
    'team'  => 'field_user_teams',
  );

  $query = new \EntityFieldQuery();

  // Get entities of type user which are active and have a matching id.
  $query->entityCondition('entity_type', 'user')// .
        ->propertyCondition('status', 1)// Get all matching nids.
        ->fieldCondition($fields[$type], 'nid', $value, '=')
        ->propertyOrderBy('name', 'ASC');

  if (!empty($amount)) {
    $query->range(0, $amount);
  }
  if (!empty($random)) {
    $query->addTag('random');
  }

  // If count is set execute count.
  if ($count) {
    $query->count();
    return $query->execute();
  }

  // Execute query.
  $results = $query->execute();

  $users = array();
  if (!empty($results['user'])) {
    // Load the users.
    $users = user_load_multiple(array_keys($results['user']));

    // If keyed we create an array containing uid => username.
    if ($keyed) {

      // Place to store the users.
      $list = array();

      // Loop through users.
      foreach ($users as $user) {

        // To prevent future problems with ldap.
        if (isset($user->mail) && $user->mail != '') {

          // Check if the user has a realname.
          if (!empty($user->realname)) {
            $user->name = $user->realname;
          }
          $list[$user->mail] = $user->name;
        }
      }
      // Return list.
      return $list;
    }
  }

  // Return loaded users.
  return $users;
}

/**
 * Function to get user groups.
 *
 * @param int $uid
 *   The user id.
 * @param bool $grouptitled
 *   When TRUE, return 'group id' as key and 'group title' as value
 *
 * @return array
 *   Array of usergroups.
 */
function openlucius_core_fetch_user_groups($uid, $grouptitled = FALSE) {
  // Load user.
  $account = user_load($uid);

  // Initiate usergroups.
  $usergroups = array();

  // Loop through groups and add items.
  foreach ($account->field_groups[LANGUAGE_NONE] as $group) {

    // Return 'group id' as key and 'group title' as value.
    if ($grouptitled) {
      $usergroups[$group['nid']] = openlucius_core_fetch_node_title($group['nid']);
    }

    // Only return group id's as values.
    else {
      $usergroups[] = $group['nid'];
    }
  }
  return $usergroups;
}

/**
 * Function for block needed at text-documents.
 */
function openlucius_core_textdocblock() {

  $menu_item = menu_get_item();
  $node      = menu_get_object();
  // Use this to build content.
  $content = array();

  if ($menu_item['page_callback'] == 'node_page_view' && !empty($node->type) && $node->type == 'ol_text_document') {
    $wrapper   = entity_metadata_wrapper('node', $node);
    $groupnode = $wrapper->field_shared_group_reference->value();
    $groupid   = $groupnode->nid;

    // It is possible for a label to contain HTML.
    // The label/option could be 'user generated content'.
    $client_switch = check_plain($wrapper->field_shared_show_clients->label());

    // Add 'created by and when' info when we are in view page mode.
    // Get text-doc node info.
    $query = db_select('node', 'n')
      ->fields('n', array('created'))
      ->fields('u', array('name', 'uid'))
      ->condition('n.nid', $node->nid);

    // Join on node table.
    $query->join('users', 'u', 'n.uid = u.uid');

    // Execute query.
    $results = $query->execute()->fetchAssoc();

    // Get all fields.
    $date_created = format_date($results['created']);
    $name_created = $results['name'];
    $uid          = $results['uid'];

    // Build content for tpl file.
    $content['created_info'] = t('Created by') . ' ' . l($name_created, 'user/' . $uid) . ' | ' . $date_created . ' | ' . t('Show clients') . ' : ' . $client_switch;

    // Add edit button & index table when we are in view mode.
    $content['edit_button'] = l(t('Edit this Text-doc.'), 'node/' . $node->nid . '/edit', array(
      'query'      => array('destination' => 'node/' . $node->nid),
      'attributes' => array('class' => array('textdoc_latest')),
    ));

    // Link back to group text-doc index.
    $content['backbutton'] = l(t('< Text-docs index'), 'group-textdocuments/' . $groupid, array('attributes' => array('class' => array('textdoc_backlink'))));

    // Add a move text document button.
    $content['move_button'] = l(t('Move'), 'node/' . $node->nid . '/move', array('attributes' => array('class' => array('textdoc_backlink'))));

    // Add the text-docs index table.
    $content['index'] = views_embed_view('text_documents_in_a_group', 'block_4', $groupid);
  }

  // Add cancel edit button.
  // When we are in edit mode.
  if ($menu_item['page_callback'] == 'node_page_edit') {
    $content['cancel_edit'] .= l(t('Cancel edit'), 'node/' . $node->nid, array('attributes' => array('class' => array('textdoc_latest'))));
  }
  $html = theme('openlucius_core_textdoc', array('vars' => $content));

  // Return content to block.
  return $html;
}

/**
 * Function to build the heading block.
 */
function openlucius_core_heading_content() {

  $node = menu_get_object();
  // Get node references bundled.
  $references = openlucius_core_group_get_referenced_items($node->nid);

  // Different references for todo since it needs a join and condition.
  $todo_references = openlucius_core_group_get_referenced_items($node->nid, TRUE, 'todo');

  // Get users with a reference to this node bundled.
  $referenced_users = openlucius_core_fetch_users('group', $node->nid, TRUE);

  // Get files in group.
  $file_count = openlucius_files_count_group($node->nid);

  // Check if 0.
  if ($file_count != 0) {
    $references['file'] = $file_count;
  }

  if (isset($references['ol_todo_list'])) {
    $badge    = $todo_references['ol_todo'];
    $first    = t('Add first todo');
    $add_path = 'node/add/ol-todo/' . $node->nid;
  }
  else {
    $badge    = $todo_references['ol_todo_list'];
    $first    = t('Add first todo-list');
    $add_path = 'node/add/ol-todo-list/' . $node->nid;
  }

  // List with the regular buttons and their paths.
  $buttons = array(
    'envelope' => array(
      'text'     => t('Messages'),
      'first'    => t('Add first message'),
      'path'     => 'group-messages/' . $node->nid,
      'add-path' => 'node/add/ol-message/' . $node->nid,
      'bundle'   => 'ol_message',
      'badge'    => isset($references['ol_message']) ? $references['ol_message'] : NULL,
    ),
    'inbox'    => array(
      'text'     => t('Todo&#39;s'),
      'first'    => $first,
      'path'     => 'group-todo-lists/' . $node->nid,
      'add-path' => $add_path,
      'bundle'   => 'ol_todo',
      'badge'    => $badge,
    ),
    'font'     => array(
      'text'     => t('Text docs'),
      'first'    => t('Add first Text doc'),
      'path'     => 'group-textdocuments/' . $node->nid,
      'add-path' => 'node/add/ol-text-document/' . $node->nid,
      'bundle'   => 'ol_text_document',
      'badge'    => isset($references['ol_text_document']) ? $references['ol_text_document'] : NULL,
    ),
    'file'     => array(
      'text'     => t('Files'),
      'first'    => t('Add first file'),
      'add-path' => 'node/add/file/' . $node->nid,
      'path'     => 'group-files/' . $node->nid,
      'bundle'   => 'file',
      'badge'    => isset($references['file']) ? $references['file'] : NULL,
    ),
    'user'     => array(
      'text'  => t('Users'),
      'first' => t('Users'),
      'path'  => 'group-users/' . $node->nid,
      'badge' => ($referenced_users != FALSE) ? $referenced_users : NULL,
    ),
    'calendar' => array(
      'text'     => t('Calendar'),
      'first'    => t('Add first event'),
      'path'     => 'group-calendar/month/' . date('Y-m') . '/' . $node->nid,
      'add-path' => 'node/add/ol-event/' . $node->nid,
      'bundle'   => 'ol_event',
      'badge'    => NULL,
    ),
  );

  // Allow other modules to alter the heading.
  drupal_alter('openlucius_core_group_heading', $node, $buttons);

  // Initialize array.
  $vars = array(
    'primary'   => '',
    'secondary' => '',
  );

  // Lets build buttons, loop through.
  foreach ($buttons as $key => $button) {
    $button['type'] = $key;

    // Calendar is an exception.
    if ($key == 'calendar') {

      // Check if there are no events.
      if ($button['badge'] == NULL || $button['badge'] == FALSE) {
        if (!isset($references['ol_event'])) {

          // Build the button.
          $html = theme('openlucius_core_button', array('vars' => $button));

          // Unset the badge.
          unset($button['badge']);

          // Create button.
          $vars['secondary'] .= l($html, $button['add-path'], array(
            'html'       => TRUE,
            'attributes' => array(
              'class' => array('btn btn-default btn-xs'),
            ),
          ));
        }
      }

      // Change title for normal calendar button as it is the only big button
      // without a badge.
      $button['first'] = t('Calendar');
    }

    // Overrides for closed todolists.
    if ($key == 'inbox' && isset($todo_references['ol_todo_list']) && $todo_references['ol_todo_list'] > 0) {
      $button['text']  = t('Add new todo-list');
      $button['badge'] = $todo_references['ol_todo'];
    }

    // Build the button.
    $html = theme('openlucius_core_button', array('vars' => $button));

    // Check if we have a count.
    if ((isset($button['badge']) && $button['badge'] != NULL && $button['badge'] != FALSE) || $key == 'calendar') {
      $vars['primary'] .= l($html, $button['path'], array(
        'html'       => TRUE,
        'attributes' => array(
          'class' => array('btn btn-default btn-sm'),
        ),
      ));
    }
    else {
      $vars['secondary'] .= l($html, $button['add-path'], array(
        'html'       => TRUE,
        'attributes' => array(
          'class' => array('btn btn-default btn-xs'),
        ),
      ));
    }
  }

  return implode('', $vars);
}

/**
 * Function to get referenced items.
 *
 * @param int $group
 *   The node id.
 * @param bool $count
 *   If set to false this function returns the objects.
 *
 * @return array
 *   Containing the values.
 */
function openlucius_core_group_get_referenced_items($group, $count = TRUE, $type = '') {

  // For storing the results (if $count is FALSE) or counts if TRUE.
  $results = array();

  // Get nodes with a reference to $group.
  $query = db_select('field_data_field_shared_group_reference', 'n')
    ->fields('n', array('bundle', 'entity_id'))
    ->condition('n.field_shared_group_reference_nid', $group)
    ->condition('m.status', 1, '=');

  $query->addTag('node_access');

  // Join on node table.
  $query->join('node', 'm', 'm.nid = n.entity_id');

  if ($type == 'todo') {

    // Add a join to the field_todo_label table.
    $query->join('field_data_field_todo_label', 'f', 'm.nid = f.entity_id');
  }

  // If count count else get everything.
  if ($count) {

    // Group by bundle so we have a bundle and amount.
    $query->groupBy('n.bundle');

    // Add the COUNT expression for the amount per bundle.
    $query->addExpression('COUNT(n.bundle)', 'count');

    // Execute query.
    $results = $query->execute();

    // Fetch all keyed as bundle => count.
    return $results->fetchAllKeyed(0, 2);
  }

  // Execute query.
  $results = $query->execute();

  // Fetch all and return.
  return $results->fetchAll();
}

/**
 * Custom validation for user profile.
 */
function openlucius_core_profile_validate($form, &$form_state) {

  $values = $form_state['values'];
  $count  = 0;

  // Loop through roles.
  foreach ($values['roles'] as $role) {
    // Check if set.
    if ($role == TRUE) {
      $count++;
    }
  }

  if ($count == 1) {
    form_set_error('roles', t('Select at least one extra role, otherwise the user will have no access.'));
  }
}

/**
 * Custom form for adding teams, groups and members to active group.
 */
function openlucius_core_add_form($form, &$form_state, $view) {

  // Only users with the 'create ol_group content' permission may see this form.
  if (!user_access('create ol_group content')) {
    return FALSE;
  }

  // Initialise the form.
  $form = array();

  $form['group_nid'] = array(
    '#type'       => 'hidden',
    // Cannot find documentation about #value in hidden, only when its a markup
    // but since we are loading an arguments from the view better sanitize it.
    '#value'      => check_plain($view->args[0]),
    '#attributes' => array('class' => array('group_nid')),
  );

  // Group section.
  $form['fieldset']                = array(
    '#type' => 'fieldset',
  );
  $form['fieldset']['add_team']    = array(
    '#type'              => 'textfield',
    '#attributes'        => array('placeholder' => array('Team')),
    '#autocomplete_path' => 'autocomplete/team',
  );
  $form['fieldset']['add_user']    = array(
    '#type'              => 'textfield',
    '#attributes'        => array('placeholder' => array('User')),
    '#autocomplete_path' => 'autocomplete/user',
  );
  $form['fieldset']['user_submit'] = array(
    '#type'       => 'submit',
    '#value'      => t('Add'),
    '#attributes' => array('class' => array('btn', 'btn-default', 'btn-xs')),
  );

  return $form;
}

/**
 * Function to return the active group.
 * @return int
 *   The current group id or 0.
 */
function openlucius_core_get_active_group() {

  $entity    = menu_get_object('node', 1);
  $menu_item = menu_get_item();
  $gid       = 0;

  // Any node.
  if (isset($entity->type) && $entity->type) {
    if ($entity->type == 'ol_group') {
      $gid = $entity->nid;
    }
    elseif (!empty($entity->field_shared_group_reference)) {
      $gid = $entity->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
    }
  }
  elseif ($menu_item['page_callback'] == 'views_page' || $menu_item['page_callback'] == 'node_add') {
    // Some exceptions.
    if ($menu_item['page_arguments'][0] == 'group_calendar' && $menu_item['page_arguments'][1] == 'page_4') {
      return FALSE;
    }

    // Get numeric arguments.
    $numeric_args = array();
    foreach ($menu_item['page_arguments'] as $arg) {
      if (is_numeric($arg)) {
        $numeric_args[] = $arg;
      }
    }

    // If there are numeric arguments.
    if (count($numeric_args) > 0) {
      // Fetch all groups id's, which match the arguments.
      $group_ids = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('type', 'ol_group', '=')
        ->condition('nid', $numeric_args, 'IN')
        ->execute()
        ->fetchAllKeyed(0, 0);

      // Loop through the group ids.
      foreach ($group_ids as $arg) {
        if (in_array($arg, $numeric_args)) {
          $gid = $arg;
          break;
        }
      }
    }
  }
  return $gid;
}

/**
 * Function to check if an user is in the current group.
 * @return bool
 *   If the user has access to the group.
 */
function openlucius_core_access_to_current_group() {

  // The logged in user.
  global $user;

  // Get the active group.
  $gid = openlucius_core_get_active_group();

  return openlucius_core_user_in_group($gid, $user->uid);
}

/**
 * Implements hook_view_post_render().
 *
 * Because views conflicts with grants in a way when a relation with empty
 * todos from the list is added.
 */
function openlucius_core_views_post_render(&$view, &$output, &$cache) {
  // Only do on one view.
  if ($view->name == 'todos_in_group_dashboard' && $view->current_display == 'block') {

    // Only attach here if we have results.
    if (!empty($view->result)) {

      // Get the contextual filter.
      $group = $view->args[0];
      openlucius_core_attach_empty_active_todolists($output, $group);
    }
    else {

      // Hide if empty.
      if (empty($view->empty)) {
        $output = '';
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function openlucius_core_views_pre_render(&$view) {
  global $user;

  if ($view->name == 'todos_in_group_dashboard' && $view->current_display == 'block') {

    if (user_access('openlucius todo toggle')) {
      // Append token for the user.
      $view->token = drupal_get_token();
    }

    $output = '';
    $group  = $view->args[0];
    openlucius_core_attach_empty_active_todolists($output, $group);
    if (isset($view->empty['area_text_custom']->options['content']) && !empty($output)) {
      $view->empty['area_text_custom']->options['content'] = $output;
    }
    else {
      $view->empty = array();
    }
  }
  elseif ($view->name == 'group_calendar') {
    if ($view->current_display == 'page_1') {
      $account = user_load($user->uid);
      $path    = url('calendar/' . $view->args[0] . '/export.ics/' . $view->args[1], array('absolute' => TRUE));
      $webcal  = str_replace('http://', 'webcal://', $path);

      if (isset($account->field_user_hash[LANGUAGE_NONE][0]['value'])) {
        if ($image = theme('image', array(
          'path'   => 'misc/feed.png',
          'width'  => 16,
          'height' => 16,
          'alt'    => t('Subscribe to calendar'),
        ))
        ) {
          $view->feed_icon = l($image, $webcal, array(
              'query'      => array('hash' => $account->field_user_hash[LANGUAGE_NONE][0]['value']),
              'html'       => TRUE,
              'attributes' => array('class' => array('feed-icon')),
            ));
        }
      }
    }
    elseif ($view->current_display == 'page_5') {
      $view->feed_icon = '';
    }
    // We need to alter the results.
    elseif ($view->current_display == 'feed_1' && isset($_GET['hash']) && empty($view->result)) {
      $uid = openlucius_core_hash_to_uid();
      if (!empty($uid)) {

        // Check if the hashed user is in this group.
        if (openlucius_core_user_in_group($view->args[1], $uid)) {

          // Replace the user.
          $user = user_load($uid);
          $view = views_get_view('group_calendar');
          $view->set_display('feed_1');
          $view->execute();
        }
      }
    }
  }
  elseif ($view->name == 'todos_on_todo_list_page') {
    if (user_access('openlucius todo toggle')) {
      // Append token for the user.
      $view->token = drupal_get_token();
    }

    // Get closed tid.
    $closed = variable_get('todo_closedstatus_tid');
    foreach ($view->result as &$result) {
      $result->is_closed = FALSE;
      // Check if the todo is closed.
      if ($result->field_field_todo_label[0]['raw']['tid'] == $closed) {
        $result->is_closed = TRUE;
      }
    }
  }
}

/**
 * Form constructor for the add todo form.
 *
 * @param int $todo_list_reference
 *   The todolist referenced in the todo.
 *
 * @see openlucius_core_add_form_validate()
 * @see openlucius_core_add_form_submit()
 * @ingroup forms
 */
function openlucius_core_add_todo_form($form, &$form_state, $todo_list_reference) {

  $group = menu_get_object();

  $form['group_reference'] = array(
    '#type'  => 'hidden',
    '#value' => $group->nid,
  );

  $form['todo_list_reference'] = array(
    '#type'  => 'hidden',
    '#value' => $todo_list_reference,
  );

  $form['add_link'] = array(
    '#markup' => '<button class="show_form show_form-' . check_plain($todo_list_reference) . ' btn btn-openlucius btn-xs" type="button"><span class="glyphicon glyphicon-plus-sign"> ' . t('Todo') . '</span></button>',
  );

  $form['todo_title'] = array(
    '#title'      => t('Title'),
    '#type'       => 'textfield',
    '#attributes' => array(
      'class'        => array(
        'todo_input_field',
        'todo_input_field-' . $todo_list_reference,
      ),
      'autocomplete' => array('off'),
    ),
    '#weight'     => 0,
  );

  // Fetch all users.
  $all_users = openlucius_core_fetch_users('group', $group->nid);

  // Initiate array.
  $users = array();

  foreach ($all_users as $key => $item) {
    if (!empty($item->realname)) {
      $users[$key] = $item->realname;
    }
    else {
      $users[$key] = $item->name;
    }
  }

  $form['field_todo_user_reference'] = array(
    '#type'         => 'select',
    '#options'      => $users,
    '#empty_option' => '- ' . t('None') . ' -',
    '#attributes'   => array(
      'class' => array(
        'todo_assign_to',
        'todo_assign_to-' . $todo_list_reference,
      ),
    ),
    '#weight'       => 10,
  );

  $form['field_todo_due_date_singledate'] = array(
    '#title'           => '',
    '#type'            => 'date_popup',
    '#date_format'     => 'j F Y',
    '#date_year_range' => '0:+2',
    '#default_value'   => date('Y-m-d', time()),
    '#attributes'      => array(
      'class' => array(
        'todo_due_date',
        'todo_due_date-' . $todo_list_reference,
      ),
    ),
    '#weight'          => 20,
  );

  $form['submit'] = array(
    '#type'       => 'submit',
    '#value'      => t('Add'),
    '#attributes' => array(
      'class' => array(
        'add-todo',
        'btn-xs',
        'todo_submit',
        'todo_submit-' . $todo_list_reference,
      ),
    ),
    '#ajax'       => array(
      'callback' => 'openlucius_core_add_todo_form_ajax_submit',
      'wrapper'  => 'todo_title',
    ),
    '#weight'     => 30,
  );

  $form['done_link'] = array(
    '#markup' => '<a href="#" class="hide_form hide_form-' . check_plain($todo_list_reference) . '">' . t('Done adding') . '</a>',
    '#weight' => 40,
  );

  $form['feedback'] = array(
    '#markup' => '<span class="hidden feedback">' . t('Successfully added the todo') . '</span>',
  );

  return $form;
}

/**
 * Form validation handler for openlucius_core_add_todo_form().
 * @see openlucius_core_add_form_submit()
 */
function openlucius_core_add_form_validate($form, &$form_state) {

  $values = $form_state['values'];

  // Get group.
  $group = node_load($values['group_nid']);

  // Get wrapper.
  $node_wrapper = entity_metadata_wrapper('node', $group);
  if (!empty($values['add_user'])) {
    $type = 'user';

    // Get node id / user id from data.
    $id   = openlucius_core_filter_id($values['add_user']);
    $user = user_load($id);

    // This group doesn't allow clients to be added.
    if (!$node_wrapper->field_shared_show_clients->value()) {

      // Check for client role.
      if (user_access('openlucius client', $user)) {
        form_set_error('add_user', t('This @type is a client, you must change
            the "Working with clients in this group?" setting to Yes if you wish
            to import.', array('@type' => $type)));
      }
    }
  }
  if (!empty($values['add_team'])) {
    $type = 'team';
    $id   = openlucius_core_filter_id($values['add_team']);
    if (is_numeric($id)) {

      // Fetch users who are a member of type.
      $users = openlucius_core_fetch_users('team', $id);

      // This group doesn't allow clients to be added.
      if (!$node_wrapper->field_shared_show_clients->value()) {

        // Preliminary check on clients.
        foreach ($users as $user) {

          // Check for client.
          if (user_access('openlucius client', $user)) {
            form_set_error('add_team', t('This @type contains a client, you must change
            the "Working with clients in this group?" setting to Yes if you wish
            to import.', array('@type' => $type)));
          }
        }
      }
    }
  }
}

/**
 * Form submission handler for openlucius_core_add_todo_form().
 * @see openlucius_core_add_form_validate()
 */
function openlucius_core_add_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Get group.
  $group = node_load($values['group_nid']);

  if (!empty($values['add_team'])) {
    $id = openlucius_core_filter_id($values['add_team']);
    // Get all the users in the team.
    $users = openlucius_core_fetch_users('team', $id);
  }

  if (!empty($values['add_user'])) {
    $id    = openlucius_core_filter_id($values['add_user']);
    $users = array(user_load($id));
  }

  $user_count = 0;
  // Loop through users.
  foreach ($users as $user) {
    $in_group = FALSE;

    // Get user wrapper.
    $user_wrapper = entity_metadata_wrapper('user', $user);

    // Loop through references of field.
    foreach ($user_wrapper->field_groups->value() as $reference) {

      // Check for match in references.
      if ($reference->nid == $group->nid) {
        // User is already in group so break.
        $in_group = TRUE;
        break;
      }
    }

    // If the user is not in the group.
    if (!$in_group) {
      // Group id to field.
      $user_wrapper->field_groups[] = $group;
      $user_wrapper->save();

      // Save user.
      user_save($user);
      // Increase counter per user.
      $user_count++;
    }
  }

  // Message to be displayed after successful add.
  drupal_set_message(t('@number user(s) have been added to group @group', array(
    '@number' => $user_count,
    '@group'  => $group->title,
  )));
}

/**
 * Helper function to filter the id from autocomplete results.
 *
 * @param string $string
 *   The string to filter, 'User (6)'.
 *
 * @return mixed
 *   The id as integer or FALSE.
 */
function openlucius_core_filter_id($string) {
  preg_match('#\((.*?)\)#', $string, $match);
  if (is_numeric($match[1])) {
    return $match[1];
  }
  else {
    return FALSE;
  }
}

/**
 * Ajax form submission handler for openlucius_core_add_todo_form().
 */
function openlucius_core_add_todo_form_ajax_submit($form, $form_state) {

  // The logged in user.
  global $user;

  $commands = array();
  $values   = $form_state['values'];

  // Set variables for later use.
  $group_reference = $values['group_reference'];
  $title           = $values['todo_title'];
  $assign_to       = $values['field_todo_user_reference'];
  $due_date        = strtotime($values['field_todo_due_date_singledate']);

  // The format (5 May) for use below.
  $due_date_display = format_date($due_date, 'custom', 'd M');

  $todo_list_reference = $values['todo_list_reference'];

  // Only execute if there is a title inserted.
  if (!empty($title) && isset($title)) {

    // Create a new ol_todo node object.
    $node = new StdClass();

    // Add the type and language.
    $node->type     = 'ol_todo';
    $node->language = LANGUAGE_NONE;

    // Prepare the node object for editing.
    node_object_prepare($node);

    // Add the required fields.
    $node->uid                                                   = $user->uid;
    $node->title                                                 = $title;
    $node->field_shared_group_reference[LANGUAGE_NONE][0]['nid'] = $group_reference;
    $node->field_todo_list_reference[LANGUAGE_NONE][0]['nid']    = $todo_list_reference;
    if (isset($assign_to) && is_numeric($assign_to)) {
      $node->field_todo_user_reference[LANGUAGE_NONE][0]['uid'] = $assign_to;
    }

    if (isset($due_date) && !empty($due_date)) {
      $node->field_todo_due_date_singledate[LANGUAGE_NONE][0]['value']  = $due_date;
      $node->field_todo_due_date_singledate[LANGUAGE_NONE][0]['value2'] = $due_date;
    }

    // Allow other modules to alter the node before saving.
    drupal_alter('openlucius_core_inline_todo_save', $node, $values);

    // Save the node.
    node_save($node);
    $nid = $node->nid;
  }

  $username = user_load($assign_to)->name;

  // And prepend the content before the row with that last id.
  $target = 'tr#quick-add-to-' . $todo_list_reference;

  $status = '-';
  if (!empty($node->field_todo_label)) {
    $term   = taxonomy_term_load($node->field_todo_label[LANGUAGE_NONE][0]['tid']);
    $status = check_plain($term->name);
  }

  // Get the template for the todo row.
  $vars             = array();
  $vars['time_ago'] = t('@count sec', array('@count' => 1));

  $vars['nid']           = $nid;
  $vars['node_link']     = l($title, 'node/' . $nid);
  $vars['user_link']     = l($username, 'user/' . $assign_to);
  $vars['status']        = $status;
  if ($status !== '-') {
    $vars['label-tid']   = $node->field_todo_label[LANGUAGE_NONE][0]['tid'];
  }
  else {
    $vars['label-tid']   = variable_get('todo_openstatus_tid');
  }
  $vars['date']          = $due_date_display;
  $destination           = array('query' => array('destination' => 'node/' . $group_reference));
  $vars['node_edit_url'] = url('node/' . $nid . '/edit', $destination);
  if (drupal_valid_path('node/' . $nid . '/delete')) {
    $vars['node_delete_url'] = url('node/' . $nid . '/delete', $destination);
  }

  // Add token for checkbox.
  $vars['token'] = drupal_get_token();

  // Trim the content, because the blank line coding standard from Drupal
  // breaks the inserting from Ajax, it adds a wrapper div.
  $content = trim(theme('openlucius_core_add_todo', array('vars' => $vars)));

  // Build the commands array.
  $commands[] = ajax_command_after($target, $content);

  return array(
    '#type'     => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Implements hook_heartbeat_activity_view().
 */
function openlucius_core_heartbeat_activity_view(HeartbeatActivity $heartbeatActivity, $view_mode = 'full', $language = NULL) {
  // If the username is set, remove it. We do not want it anywhere.
  if (isset($heartbeatActivity->content['username']) && !empty($heartbeatActivity->content['username'])) {
    unset($heartbeatActivity->content['username']);
  }
}

/**
 * Implements heartbeat_theme_alter().
 */
function openlucius_core_heartbeat_theme_alter(&$messages, HeartbeatStream $heartbeatStream) {

  foreach ($messages as $key => $message) {
    $message = &$messages[$key];
    // Since its not possible to translate the ' and ' separator
    // we use this function to make it translatable.
    // Get the current set separator.
    $separator = $message->template->concat_args['merge_end_separator'];
    // Only trigger if the string is found.
    if (strpos($message->message, $separator)) {
      // Check if it is translated.
      if (t('merge_end_separator') != 'merge_end_separator') {
        // Replace with the translated separator.
        $message->message = str_replace($separator, t('merge_end_separator'), $message->message);
      }
    }
  }
}

/**
 * Function to get all the lists within a group.
 *
 * @param int $group_id
 *   The id of a group.
 *
 * @return array
 *   List of lists in a group.
 */
function openlucius_core_get_lists_in_group($group_id) {
  $query = db_select('field_data_field_shared_group_reference', 'g');

  $query->join('node', 'n', 'n.nid = g.entity_id');
  $result = $query->fields('n', array('nid', 'title'))
                  ->condition('g.bundle', 'ol_todo_list', '=')
                  ->condition('n.status', '1', '=')
                  ->condition('g.field_shared_group_reference_nid', $group_id, '=')
                  ->orderBy('title', 'ASC')
                  ->execute()
                  ->fetchAll();

  foreach ($result as $item) {
    // Still needs to be sanitized.
    $list[$item->nid] = $item->title;
  }

  // Return the list.
  return $list;
}

/**
 * Function to get all the custom content types.
 * @return array
 *   List of the custom content types.
 */
function openlucius_core_get_content_types() {

  $content_types = array(
    'file',
    'ol_event',
    'ol_file_folder',
    'ol_message',
    'ol_text_document',
    'ol_todo',
    'ol_todo_list',
  );

  // Allow other modules to alter the content types list.
  drupal_alter('openlucius_core_content_types', $content_types);

  return $content_types;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openlucius_core_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  // Add the option to show everything.
  if ($form['#id'] == 'views-exposed-form-all-todo-lists-in-a-group-page-1') {
    $all                                      = array('All' => t('- Any -'));
    $form['field_todo_label_tid']['#options'] = $all + $form['field_todo_label_tid']['#options'];
  }

  // On this form limit the users to users in your own groups.
  if ($form['#id'] == 'views-exposed-form-all-todo-lists-in-a-group-page-2' || $form['#id'] == 'views-exposed-form-group-calendar-page-5') {
    global $user;
    $account = user_load($user->uid);

    // Views option for all.
    $options['All'] = t('- Any -');

    // Loop the groups of the current user.
    foreach ($account->field_groups[LANGUAGE_NONE] as $group) {

      // Get all the users in the group.
      $users_in_group = openlucius_core_fetch_users('group', $group['nid']);

      // Add those users to the options.
      foreach ($users_in_group as $entity) {
        $options[$entity->uid] = $entity->name;
      }
    }

    // Replace the options.
    $form['field_todo_user_reference_uid']['#options'] = $options;
  }
  if ($form['#id'] == 'views-exposed-form-group-calendar-page-5' || $form['#id'] == 'views-exposed-form-group-calendar-page-4') {

    // Get the closed term.
    $closed = current(taxonomy_get_term_by_name('closed', 'labels_todo_s'));

    // Remove closed from the options.
    unset($form['field_todo_label_tid_1']['#options'][$closed->tid]);
  }
}

/**
 * Function to check if an user is a client.
 *
 * @param mixed $account
 *   Empty, user object or uid.
 *
 * @return bool
 *   Returns either TRUE or FALSE.
 */
function openlucius_core_user_is_client($account = NULL) {
  global $user;

  if ($account == NULL) {
    $account = $user;
  }
  elseif (!isset($account->uid)) {
    $account = user_load($account);
  }

  if (user_access('openlucius client', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_heartbeat_messages_alter().
 */
function openlucius_core_heartbeat_messages_alter(&$messages, HeartbeatStream $heartbeatStream) {
  global $user;

  // Fetch group users.
  $my_groups = openlucius_core_fetch_user_groups($user->uid);

  foreach ($messages as &$message) {
    // Fetch groups from message user.
    $groups = openlucius_core_fetch_user_groups($message->uid);

    // Check if we have matching groups.
    $matches = array_intersect($my_groups, $groups);

    // If not hide the message.
    if (empty($matches)) {
      $message->access     = HEARTBEAT_NONE;
      $message->uid_access = FALSE;
      $message->nid_access = FALSE;
    }
  }
}

/**
 * Implements hook_help().
 */
function openlucius_core_help($path, $arg) {

  global $user;

  // Check if we are on a Group Dashboard page.
  $nodetype = db_query('SELECT type FROM {node} WHERE nid = :nid', array(':nid' => $arg[1]))->fetchField();

  if ($arg[0] == 'node' && $arg[2] != 'edit' && $nodetype == 'ol_group' && user_access('access content')) {

    $node = menu_get_object();
    // Get node references bundled.
    $references = openlucius_core_group_get_referenced_items($node->nid);
    // TODO: merge with earlier bugfix, $references only checks on todo's now.
    // Get files in group.
    $file_count = openlucius_files_count_group($node->nid);

    // Check if 0.
    if ($file_count != 0) {
      $references['file'] = $file_count;
    }

    // If there are no items in Group yet, print help text:
    if (count($references) == 0) {
      $helptext = '<p><b>' . t('Hi') . ' ' . $user->name . t(', welcome to the dashboard of your new Group!') . '</b><p>';
      if (user_access('create ol_group content')) {
        $helptext .= t('Your next steps:');
        $helptext .= '</p><ul>';
        $helptext .= '<li>';
        $helptext .= t('Add Group members: click on the "Users" button.');
        $helptext .= '</li>';
      }
      $helptext .= '<li>' . t('You can start sharing your 1st items: click on one of the "Add first..." buttons.') . '</li></ul>';

      return $helptext;
    }
  }
}

/**
 * Function viewing 'my groups'.
 */
function openlucius_core_mygroupsblock() {

  global $user;

  // Get all groups where user is added.
  $usergroups = openlucius_core_fetch_user_groups($user->uid, TRUE);

  // Sort.
  natcasesort($usergroups);

  // Initialize.
  $content = '';

  // Return 'group id' as key and 'group title' as value.
  // Build content for 'my groups'.
  foreach ($usergroups as $gid => $group_title) {

    // Make sure no unpublished Groups are shown.
    if (!empty($group_title)) {
      $vars['group_title']       = $group_title;
      $vars['group_url']         = url('node/' . $gid);
      $vars['group_users_count'] = openlucius_core_fetch_users('group', $gid, TRUE);
      $content .= theme('openlucius_core_my_groups', array('vars' => $vars));
    }
  }
  return $content;
}

/**
 * Page callback function for default groups.
 */
function openlucius_core_default_group_settings_form($form, &$form_state) {

  $form = array();

  // The groups as fieldset.
  $form['groups']                           = array(
    '#title'       => t('The groups'),
    '#type'        => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );
  $form['groups']['openlucius_core_groups'] = array(
    '#title'         => t('Automatically add users to these groups when created'),
    '#type'          => 'checkboxes',
    '#options'       => openlucius_core_get_checkboxes('group'),
    '#default_value' => variable_get('openlucius_core_groups', ''),
    '#required'      => FALSE,
  );
  // The teams as fieldset.
  $form['teams']                          = array(
    '#title'       => t('The teams'),
    '#type'        => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );
  $form['teams']['openlucius_core_teams'] = array(
    '#title'         => t('Automatically add users to these teams when created'),
    '#type'          => 'checkboxes',
    '#options'       => openlucius_core_get_checkboxes('team'),
    '#default_value' => variable_get('openlucius_core_teams', ''),
    '#required'      => FALSE,
  );

  return system_settings_form($form);
}

/**
 * Function to get the groups/teams.
 *
 * @param string $type
 *   The type of checkbox list to get (group/team).
 *
 * @return mixed
 *   Returns array of key value ids.
 */
function openlucius_core_get_checkboxes($type) {

  // Check for the type of item to get.
  if ($type == 'group') {
    $type = 'ol_group';
  }
  elseif ($type == 'team') {
    $type = 'team';
  }

  // Query the database to get all the items.
  $results = db_select('node', 'n')
    ->fields('n', array('title', 'nid'))
    ->condition('n.type', $type, '=')
    ->condition('n.status', 1, '=')
    ->execute()
    ->fetchAll();

  // Check if there are any results.
  if (isset($results)) {
    // If so, loop through the results.
    foreach ($results as $result) {
      // Set array of node ids and values.
      $ids_list[$result->nid] = $result->title;
    }

    // Return the list.
    return $ids_list;
  }

  // If no results, return false.
  return FALSE;
}

/**
 * Function to get recent stuff stream.
 */
function openlucius_core_get_recent_stuff() {

  // This will be filled with an array of our content.
  $build = array();

  // Basic select query.
  $query = db_select('heartbeat_activity', 'h');

  $query->leftJoin('field_data_comment_body', 'c', 'h.cid = c.entity_id');
  $query->leftJoin('node', 'n', 'n.nid = h.nid');
  $query->leftJoin('field_data_field_shared_group_reference', 'gr', 'n.nid = gr.entity_id');
  $query->leftJoin('field_data_field_todo_comm_show_clients', 'sc', 'h.cid = sc.entity_id');

  $result = $query->fields('h', array(
      'uid',
      'nid',
      'cid',
      'message_id',
      'timestamp',
    ))
                  ->fields('n', array('title', 'type'))
                  ->fields('c', array('comment_body_value'))
                  ->fields('gr', array('field_shared_group_reference_nid'))
                  ->fields('sc', array('field_todo_comm_show_clients_value'))
                  ->condition('n.status', 1, '=')
                  ->condition('n.type', 'file', '<>')
                  ->extend('PagerDefault')
                  ->limit(30)
                  ->orderby('uaid', 'desc')
                  ->addTag('node_access')
                  ->execute();

  // Check if we have results.
  $count = $result->rowCount();

  if ($count == 0) {
    // We don't have results, build help text and return early.
    $vars['help_text'] = t('No recent stuff yet. Add some items in a Group and this Timeline will show them. Happy collaborating! :-)');
    $content           = theme('openlucius_core_help_block', array('vars' => $vars));
    $build['content']  = array('#markup' => $content);
    return $build;
  }

  // Initialize recent stuff items variable.
  $vars['recent_stuff_items'] = '';
  foreach ($result as $heartbeat_message) {

    // Don't show item for clients, when comment is hidden.
    if (!user_access('ol show non-client content') && $heartbeat_message->field_todo_comm_show_clients_value == 1) {
      continue;
    }

    // Build vars.
    $vars['type']         = $heartbeat_message->type;
    $vars['show_clients'] = $heartbeat_message->field_todo_comm_show_clients_value;
    $vars['nid']          = $heartbeat_message->nid;
    $vars['cid']          = $heartbeat_message->cid;
    $group_id             = $heartbeat_message->field_shared_group_reference_nid;

    // Create a link without the comment fragment for groups.
    if ($heartbeat_message->type == 'ol_group') {
      $vars['link'] = url('node/' . $vars['nid']);
    }
    // Create a link for the file folders.
    elseif ($heartbeat_message->type == 'ol_file_folder') {
      $vars['link'] = url('group-files/' . $group_id . '/' . $vars['nid']);
    }
    // Create a link with the comment fragment for all others.
    else {
      $vars['link'] = url('node/' . $vars['nid'], array('fragment' => 'comment-' . $vars['cid']));
    }

    // Do a user load.
    $user             = user_load($heartbeat_message->uid);
    $vars['username'] = check_plain($user->name);

    // Empty it, else a user without image will get image from another user.
    $vars['picture'] = '';

    if (isset($user->picture->uri)) {
      $vars['picture'] = theme('image_style', array(
        'style_name' => 'ol_50x50',
        'path'       => $user->picture->uri,
      ));
    }

    $vars['time_ago'] = format_interval(($_SERVER['REQUEST_TIME'] - $heartbeat_message->timestamp), 2);
    $vars['title']    = check_plain($heartbeat_message->title);
    $comment_body     = check_markup($heartbeat_message->comment_body_value);

    // Remove <a></a> tags, they will break our big-link block.
    $comment_body         = preg_replace('/<a[^>]*>/i', '', $comment_body);
    $vars['comment_body'] = preg_replace('/<\/a>/i', '', $comment_body);

    // Check if there is a comment body.
    if ($vars['comment_body']) {
      $vars['between_text'] = t('replied on');
    }

    // If not, set the text to added.
    else {
      $vars['between_text'] = t('added');
    }

    // Get the group title.
    $group_title = db_select('node', 'n')
      ->fields('n', array('title'))
      ->condition('n.nid', $heartbeat_message->field_shared_group_reference_nid, '=')
      ->execute()
      ->fetchField();

    $vars['group_title']  = check_plain($group_title);
    $vars['num_comments'] = db_query("SELECT COUNT(cid) AS count FROM {comment} WHERE nid =:nid", array(":nid" => $vars['nid']))->fetchField();

    // Switch for big icon right.
    $content_type = $heartbeat_message->type;

    // Initialize.
    $type_icon = '';

    // Allow overriding in other modules.
    drupal_alter('openlucius_core_get_recent_stuff', $content_type, $type_icon);

    // Switch on type.
    switch ($content_type) {
      case 'ol_text_document':
        $type_icon = 'font';
        break;

      case 'ol_event':
        $type_icon = 'calendar';
        break;

      case 'file':
        $type_icon = 'file';
        break;

      case 'ol_file_folder':
        $type_icon = 'folder-open';
        break;

      case 'ol_message':
        $type_icon = 'envelope';
        break;

      case 'ol_todo':
        $type_icon = 'inbox';
        break;

      case 'ol_todo_list':
        $type_icon = 'list-alt';
        break;

      case 'ol_group':
        $type_icon = 'record';
        break;
    }

    $vars['type_icon'] = $type_icon;

    // Build rows.
    $vars['recent_stuff_items'] .= theme('openlucius_core_recent_stuff_item', array('vars' => $vars));
  }

  // Stuff rows in wrapper.
  $content = theme('openlucius_core_recent_stuff', array('vars' => $vars));

  // Add the content.
  $build['content'] = array('#markup' => $content);

  // Add the pager.
  $build['pager'] = array(
    '#theme'  => 'pager',
    '#weight' => 5,
  );

  // Return the renderable array.
  return $build;
}

/**
 * Function to check if a todolist is empty.
 *
 * @param int $nid
 *   The todolist to be checked.
 *
 * @return bool
 *   Whether the list was empty.
 */
function openlucius_core_todolist_is_empty($nid) {
  // Get the closed status for label checking.
  $closed_tid = variable_get('todo_closedstatus_tid');

  $query = db_select('field_data_field_todo_list_reference', 'r')
    ->fields('r', array('entity_id'))
    ->condition('field_todo_list_reference_nid', $nid, '=');

  // Join for closed label check.
  $query->leftJoin('field_data_field_todo_label', 'l', 'r.entity_id = l.entity_id');

  // Add condition for label.
  $query->condition('l.field_todo_label_tid', $closed_tid, '<>');

  // Fetch results.
  $results = $query->execute()->fetchAll();

  return empty($results);
}

/**
 * Function to attach empty active todolists.
 *
 * @param string $output
 *   The output these results have to be attached to.
 * @param int $group
 *   The group for which these lists must be attached.
 */
function openlucius_core_attach_empty_active_todolists(&$output, $group) {
  // Fetch all todolists for this group.
  $query = db_select('node', 'n')->fields('n', array('title', 'nid'));

  $query->leftJoin('field_data_field_shared_group_reference', 'g', "n.nid = g.entity_id");

  $query->condition('g.field_shared_group_reference_nid', $group, '=')
        ->condition('n.status', 1, '=')
        ->condition('n.type', 'ol_todo_list', '=')
        ->orderBy('n.title', 'ASC');

  $result = $query->execute()->fetchAll();

  foreach ($result as $item) {
    // Check if this todolist is empty.
    $is_empty = openlucius_core_todolist_is_empty($item->nid);

    if ($is_empty) {
      $output .= '<h5 class="empty-todo-list"><span class="glyphicon glyphicon-list-alt"></span>' . l($item->title, 'node/' . $item->nid) . '</h5>';
    }
  }
}

/**
 * Function to obtain uid from attached hash.
 *
 * @return mixed
 *   Returns either the uid or FALSE.
 */
function openlucius_core_hash_to_uid() {
  $hash = filter_xss($_GET['hash']);
  return db_select('field_data_field_user_hash', 'h')
    ->fields('h', array('entity_id'))
    ->condition('h.field_user_hash_value', $hash, '=')
    ->execute()
    ->fetchField();
}

/**
 * Custom access callback function.
 */
function openlucius_core_access_callback() {
  global $user;
  return $user->uid == 1 || user_access('administer user settings');
}

/**
 * Function to return all terms for a vocabulary.
 *
 * @param string $machine_name
 *   The machine name of the vocabulary.
 * @param bool $full
 *   If you want the full terms or just the name.
 *
 * @return mixed
 *   Array of the terms.
 */
function openlucius_core_get_terms($machine_name, $full = FALSE) {
  $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
  $raw_terms  = taxonomy_get_tree($vocabulary->vid);
  $terms      = array();
  foreach ($raw_terms as $term) {
    if (!$full) {
      $terms[$term->tid] = check_plain($term->name);
    }
    else {
      $terms[$term->tid] = taxonomy_term_load($term->tid);
    }
  }
  return $terms;
}

/**
 * Function to toggle a todo open / closed.
 *
 * @param \stdClass $node
 *   The node to be toggled.
 */
function openlucius_core_todo_toggle(\stdClass $node) {

  // Check if we have a token, if it's invalid or not set return FALSE.
  // Check if the node type is correct otherwise return FALSE.
  if ((isset($_POST['token']) ? !drupal_valid_token($_POST['token']) : TRUE) || $node->type !== 'ol_todo' || !isset($_POST['status'])) {

    drupal_json_output(FALSE);
    drupal_exit();
  }

  // Get node wrapper for easy access.
  $node_wrapper = entity_metadata_wrapper('node', $node);

  // Close todo if status is 0.
  if (check_plain($_POST['status']) == 0) {
    $node_wrapper->field_todo_label->set(variable_get('todo_closedstatus_tid'));
  }
  // Reopend the todo.
  else {
    $old_status = variable_get('todo_openstatus_tid');
    if (isset($_POST['old_status'])) {
      $old_status = (int) check_plain($_POST['old_status']);
    }
    $node_wrapper->field_todo_label->set($old_status);
  }

  // Save node.
  $node_wrapper->save();

  // Return TRUE;
  drupal_json_output(TRUE);
  drupal_exit();
}

/**
 * Function to transfer a todo from one list to another.
 *
 * @param \stdClass $node
 *   The node to be transferred.
 */
function openlucius_core_todo_transfer(\stdClass $node) {

  // Check if we have a token, if it's invalid or not set return FALSE.
  // Check if the node type is correct otherwise return FALSE.
  if ((isset($_POST['token']) ? !drupal_valid_token($_POST['token']) : TRUE) || $node->type !== 'ol_todo' || !isset($_POST['new_list'])) {

    drupal_json_output(FALSE);
    drupal_exit();
  }

  // Get node wrapper for easy access.
  $node_wrapper = entity_metadata_wrapper('node', $node);

  // Get the list id for the new item.
  $node_list_id = (int) check_plain($_POST['new_list']);

  // Set new list.
  $node_wrapper->field_todo_list_reference->set($node_list_id);

  $node_wrapper->save();

  // Return TRUE;
  drupal_json_output(TRUE);
  drupal_exit();
}

/**
 * Function to update the weight of todo's.
 */
function _openlucius_core_todo_update_weights() {
  // Check if there's a valid token.
  if ((isset($_POST['token']) ? !drupal_valid_token($_POST['token']) : TRUE) || !isset($_POST['order'])) {

    drupal_json_output(FALSE);
    drupal_exit();
  }

  // The sent order is a list of joined node id's.
  $order = explode(',', check_plain($_POST['order']));

  // Update each node id using the key as weight.
  foreach ($order as $weight => $nid) {
    $node                                               = node_load($nid);
    $node->field_todo_weight[LANGUAGE_NONE][0]['value'] = $weight;
    node_save($node);
  }

  drupal_json_output(TRUE);
  drupal_exit();
}

/**
 * Implements hook_filter_info().
 */
function openlucius_core_filter_info() {

  // Initialize the filter array.
  $filters = array();

  // Create a filter for openlucius links.
  $filters['openlucius_links'] = array(
    'title'            => t('Replace internal links with node title and information'),
    'process callback' => '_openlucius_core_filter',
  );

  // Return the filter array.
  return $filters;
}

/**
 * Filter callback for the OpenLucius links.
 *
 * @param string $text
 *   The text to be filtered.
 *
 * @return string
 *   The filtered text.
 */
function _openlucius_core_filter($text) {

  // Preg match on the text to get the links.
  preg_match_all('/<a(.*?)>(.*?)<\/a>/', $text, $matches);

  // Extract the links.
  if (isset($matches[2]) && !empty($matches[2])) {

    // Loop through the links.
    foreach ($matches[2] as $i => $full_link) {

      // Only apply to internal links.
      if (stristr($full_link, $_SERVER['HTTP_HOST'])) {

        // Assign the absolute link and the complete link.
        $link_path = $matches[0][$i];

        // Preg match on the links to get the node id.
        preg_match('!node\/(\d+)!', $full_link, $number);

        // Preg match any fragments.
        preg_match('!#(.+)!', $full_link, $fragment);

        // Check if the node id is set.
        if (isset($number[1])) {

          // Skip 'sla' links.
          if (stripos($full_link, $number[1] . '/time/sla') === FALSE) {

          // Create a new link with the replace info.
          if (isset($fragment[1])) {
            $new_link = _openlucius_core_replace_link($number[1], $fragment[1]);
          }
          else {
            $new_link = _openlucius_core_replace_link($number[1]);
          }

          // Replace the links.
          $text = str_replace($link_path, $new_link, $text);
        }
      }
    }
  }
  }

  // Return the new html.
  return $text;
}

/**
 * Callback function for replacing the links inside a comment.
 *
 * @param int $nid
 *   The node id to get the information for.
 * @param mixed $fragment
 *   A fragment to be applied to the link.
 *
 * @return mixed
 *   Returns the link with additional information.
 */
function _openlucius_core_replace_link($nid, $fragment = NULL) {

  // TODO replace query by node load.
  // Get the node title.
  $query = db_select('node', 'n')
    ->fields('n', array('title', 'type'))
    ->fields('f', array('field_todo_label_tid'))
    ->fields('p', array('name'));

  // Join on the todolabel for status.
  $query->leftJoin('field_data_field_todo_label', 'f', 'n.nid = f.entity_id');

  // Join on the user reference to get user id.
  $query->leftjoin('field_data_field_todo_user_reference', 'u', 'n.nid = u.entity_id');

  // Join on the user table to get username.
  $query->leftjoin('users', 'p', 'u.field_todo_user_reference_uid = p.uid');

  // Add node id condition.
  $object = $query->condition('n.nid', $nid, '=')->execute()->fetchObject();

  // Check if we have a usable object.
  if (empty($object)) {
    return FALSE;
  }

  $options = array();
  if (!empty($fragment)) {
    $options['fragment'] = $fragment;
  }

  // Add the link to the html.
  $html = l($object->title, 'node/' . $nid, $options);

  // Append status and user for todo's.
  if ($object->type == 'ol_todo') {

    // Do a taxonomy load to get the status as string.
    $status = taxonomy_term_load($object->field_todo_label_tid)->name;

    // Add the status to the html.
    $html .= '<span class="filter-info"> [' . $status;

    // Check if there is an assignee, if so add it, otherwise close brackets.
    $html .= $object->name ? ' | ' . $object->name . ']' : ']';

    $html .= '</span>';
  }

  // Return the html.
  return $html;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function openlucius_core_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // Get the menu-item and menu-object.
  $item   = menu_get_item();
  $object = menu_get_object();

  if (isset($item['tab_root_href']) && $item['tab_root_href'] == 'admin/config/openlucius') {
    $data['tabs'][0]['count']++;
    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link'  => array(
        'path'              => 'admin/content',
        'title'             => t('Content'),
        'href'              => 'admin/content',
        'localized_options' => array(
          'attributes' => array(),
        ),
      ),
    );
  }

  // Check if the user is allowed to move nodes.
  if (user_access('move nodes')) {
    if (isset($object->type) && $object->type != 'ol_group' && isset($item['path']) && $item['path'] != 'node/%node/move') {
      $data['tabs'][0]['count']++;
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link'  => array(
          'path'              => 'node/%node/move',
          'title'             => t('Move'),
          'href'              => 'node/' . $object->nid . '/move',
          'localized_options' => array(
            'attributes' => array(),
          ),
        ),
      );
    }
  }
}

/**
 * Implements hook_preprocess_comment().
 */
function openlucius_core_preprocess_comment(&$variables) {

  // Check for node type of the comment.
  if (isset($variables['node']->type) && $variables['node']->type == 'ol_todo') {

    // Get the comment id.
    $cid = $variables['comment']->cid;

    // Get the breakdown button.
    $button                      = openlucius_core_get_breakdown_button($cid, 'comment');
    if (!empty($button)) {

      // Append the breakdown button.
      $variables['content'] = openlucius_core_array_insert_after(
        $variables['content'],
        'links',
        array(
          'breakdown_todo' => array(
            '#weight' => 1,
            0 => array(
              '#markup' => $button,
            ),
          ),
        )
      );

      // Increase the weight of the body so it renders correctly.
      $variables['content']['comment_body']['#weight'] = 2;
    }

    // Get the referenced items html.
    $list                         = openlucius_core_get_referenced_items($cid, 'comment');
    $variables['references_list'] = !empty($list) ? $list : '';
  }
}

/**
 * Implements hook_preprocess_node().
 */
function openlucius_core_preprocess_node(&$variables) {

  // Check for node type.
  if (isset($variables['type']) && $variables['type'] == 'ol_todo') {

    // Get the node id.
    $nid = $variables['node']->nid;

    // Get the breakdown button.
    $button                      = openlucius_core_get_breakdown_button($nid, 'node');
    $variables['breakdown_todo'] = !empty($button) ? $button : '';

    // Get the referenced items html.
    $list                         = openlucius_core_get_referenced_items($nid, 'node');
    $variables['references_list'] = !empty($list) ? $list : '';
  }
}

/**
 * Function to generate breakdown button.
 *
 * @param int $id
 *   The node or comment id.
 * @param string $type
 *   The type being node or comment.
 *
 * @return bool|string
 *   Returns the button or FALSE.
 */
function openlucius_core_get_breakdown_button($id, $type) {

  // Check the permission.
  if (user_access('access todo breakdown')) {

    // Generate token.
    $token = drupal_get_token();

    // The current node id.
    $gid = openlucius_core_get_active_group();

    // Send a translatable success message.
    $success_message = t('A new todo has been created') . '!';

    // Create the anchor tag for the breakdown.
    return '<button class="todo-breakdown" data-success="' . $success_message . '" data-token="' . $token . '" data-type="' . $type . '" data-gid="' . $gid . '" data-id="' . $id . '"><span class="glyphicon glyphicon-plus"></span><span class="glyphicon glyphicon-inbox"></span></button>';
  }

  // Return false if no access.
  return FALSE;
}

/**
 * Function for getting the html for the referenced items.
 *
 * @param int $id
 *   The id to get the references for.
 * @param string $type
 *   The type entity to fetch references for.
 *
 * @return bool|string
 *   Returns the html for the referenced items or FALSE.
 */
function openlucius_core_get_referenced_items($id, $type) {

  $output = '';

  // Check if the type is a node.
  if ($type == 'node') {
    $back_links      = openlucius_core_node_reference_get($id, 'node');
    $related_node    = openlucius_core_node_reference_get($id, 'node_reference');
    $related_comment = openlucius_core_node_reference_get($id, 'comment_reference');

    // Check if this node has back_links.
    if (!empty($back_links)) {
      $serialized_references = $back_links;
      $serialized_related    = !empty($related_node) ? $related_node : $related_comment;
    }
    // Check if this node has a related node.
    elseif (!empty($related_node)) {
      $serialized_references = $related_node;
    }
    // Check if this node has a related comment.
    elseif (!empty($related_comment)) {
      $serialized_references = $related_comment;
    }
  }
  elseif ($type == 'comment') {
    $serialized_related = openlucius_core_node_reference_get($id, 'comment');
  }

  // First go for the references.
  if (!empty($serialized_references)) {

    // Get the type of reference.
    $type = array_keys($serialized_references);

    if (!empty($type[0])) {
      $type = $type[0];

      // Check if there are node references.
      if (!empty($serialized_references[$type])) {
        $output .= openlucius_core_build_referenced_items_list($serialized_references[$type], $type);
      }
    }
  }

  // Now fetch the related items.
  if (!empty($serialized_related)) {

    // Get the type of reference.
    $type = array_keys($serialized_related);
    if (!empty($type[0])) {
      $type = $type[0];

      // Check if there are node references.
      if (!empty($serialized_related[$type])) {
        $output .= openlucius_core_build_referenced_items_list($serialized_related[$type], $type);
      }
    }
  }

  return $output;
}

/**
 * Function to generate references.
 *
 * @param mixed $references
 *   The serialized references.
 * @param string $type
 *   The type of reference.
 *
 * @return string
 *   Returns a string of html.
 */
function openlucius_core_build_referenced_items_list($references, $type) {

  $output = '';

  // Unserialize them references.
  $references = unserialize($references);

  // Check if there are array items.
  if (isset($references) && !empty($references)) {

    // Initialize items array.
    $items = array();

    // Loop through the related items.
    foreach ($references as $id) {

      switch ($type) {
        case 'node':
        case 'node_reference':
        case 'comment':
          $items[] = _openlucius_core_replace_link($id);
          break;

        case 'comment_reference':
          $comment = comment_load($id);
          $items[] = _openlucius_core_replace_link($comment->nid, 'comment-' . $id);
          break;
      }
    }
  }

  // Create a list of the referenced items.
  $item_list = theme('item_list', array(
    'items'      => $items,
    'title'      => NULL,
    'type'       => ($type == 'node_reference' || $type == 'comment_reference') ? 'ul' : 'ol',
    'attributes' => array(),
  ));

  // Check if the related items is set and not empty.
  if (!empty($item_list)) {

    // Create a list for 'Referenced from'.
    if ($type == 'node_reference' || $type == 'comment_reference') {
      $output .= '<div class="referenced-from-wrapper"><h3>' . t('Referenced from') . ':</h3>' . $item_list . '</div>';
    }

    if ($type == 'node' || $type == 'comment') {
      $output .= '<div class="related-wrapper"><h3>' . t('Related') . ':</h3>' . $item_list . '</div>';
    }
  }

  // Return the output.
  return $output;
}

/**
 * Function for breaking down todos.
 *
 * @param string $type
 *   The type data to be to be processed.
 * @param \stdClass $node
 *   The node object to be used.
 */
function openlucius_core_breakdown_todo($type, \stdClass $node) {

  // The logged in user.
  global $user;

  // Check for post values and check if the token is a valid token.
  if (isset($_POST['text']) && isset($_POST['token']) && drupal_valid_token($_POST['token'])) {

    // Sanitize the text sent by javascript.
    $todo_text = check_plain($_POST['text']);

    // Split the text in words.
    $todo_text_pieces = explode(" ", $todo_text);

    // Get the first 3 words for the title.
    $todo_title = implode(" ", array_splice($todo_text_pieces, 0, 3));

    // Instantiate a new node object.
    $todo = new StdClass();

    // Add the type and language.
    $todo->type     = 'ol_todo';
    $todo->language = LANGUAGE_NONE;

    // Prepare the node object for editing.
    node_object_prepare($todo);

    // Add the required fields.
    $todo->uid                                                   = $user->uid;
    $todo->title                                                 = $todo_title;
    $todo->field_shared_group_reference[LANGUAGE_NONE][0]['nid'] = $node->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
    $todo->field_todo_list_reference[LANGUAGE_NONE][0]['nid']    = $node->field_todo_list_reference[LANGUAGE_NONE][0]['nid'];;
    $todo->body[LANGUAGE_NONE][0]['value'] = $todo_text;

    // Set the status to new.
    $todo->field_todo_label[LANGUAGE_NONE][0]['tid'] = variable_get('todo_openstatus_tid');

    // Save the node.
    node_save($todo);

    if ($type == 'node') {
      // Register a node reference.
      openlucius_core_register_node_references('node', $node->nid, $todo->nid);
    }
    elseif ($type == 'comment') {
      // Use menu get item obtaining the comment id.
      $menu = menu_get_item();

      // Register a node reference.
      openlucius_core_register_node_references('comment', $menu['original_map'][1], $todo->nid);
    }
  }
  else {
    drupal_json_output(array(
      'type'  => 'error',
      'value' => t('An error has occurred'),
    ));
    drupal_exit();
  }
}

/**
 * Wildcard loader for comment parent.
 *
 * @param int $cid
 *   The comment cid to be loaded.
 *
 * @return bool|mixed
 *   Returns either a node object or FALSE.
 */
function openlucius_core_comment_parent_load($cid) {
  // Load the comment.
  $comment = comment_load($cid);

  // Return the parent node of the comment.
  return !empty($comment) ? node_load($comment->nid) : FALSE;
}

/**
 * Function to register a node / comment reference.
 *
 * @param string $type
 *   The type, node or comment.
 * @param int $id
 *   The base id.
 * @param int $reference_nid
 *   The node reference id.
 */
function openlucius_core_register_node_references($type, $id, $reference_nid) {

  // Check the table for the node id.
  $exists = db_select('openlucius_core_node_references', 'n')
    ->fields('n', array('rid', 'node_references'))
    ->condition('rid', $id, '=')
    ->condition('type', $type, '=')
    ->execute()
    ->fetchObject();

  // Check if there is a reference.
  if (!empty($exists)) {

    // Unserialize the reference.
    $references = unserialize($exists->node_references);

    // Push the new reference to the array of references.
    $references[] = $reference_nid;

    // Serialize the new array of references.
    $new_references = serialize($references);

    // Update the node reference.
    openlucius_core_node_reference_update($exists->rid, $new_references, $type);
    openlucius_core_node_reference_insert_original($reference_nid, $type, serialize(array($id)));
  }
  else {
    // Create a new node reference entry with node id and reference node id.
    openlucius_core_node_reference_insert($id, $type, serialize(array($reference_nid)));
    openlucius_core_node_reference_insert_original($reference_nid, $type, serialize(array($id)));
  }
}

/**
 * Function for inserting a node reference into the database.
 *
 * @param int $id
 *   The id to insert.
 * @param string $type
 *   The type to insert.
 * @param array $reference
 *   The serialized references to insert.
 */
function openlucius_core_node_reference_insert($id, $type, $reference) {

  // Create a new node reference entry with node id and reference node id.
  db_insert('openlucius_core_node_references')->fields(array(
      'rid'             => $id,
      'type'            => $type,
      'node_references' => $reference,
    ))->execute();
}

/**
 * Function for inserting a node reference into the database.
 *
 * @param int $id
 *   The id to insert.
 * @param string $type
 *   The type to insert.
 * @param array $reference
 *   The serialized references to insert.
 */
function openlucius_core_node_reference_insert_original($id, $type, $reference) {

  // Check the type.
  $type = $type == 'node' ? 'node_reference' : 'comment_reference';

  // Create a new node reference entry with node id and reference node id.
  db_insert('openlucius_core_node_references')
    ->fields(array(
      'rid'             => $id,
      'type'            => $type,
      'node_references' => $reference,
    ))->execute();
}

/**
 * Function for update a node reference in the database.
 *
 * @param int $id
 *   The id.
 * @param array $reference
 *   The references.
 * @param string $type
 *   The type to be updated.
 */
function openlucius_core_node_reference_update($id, $reference, $type) {
  // Update the database with the new references.
  db_update('openlucius_core_node_references')
    ->fields(array('node_references' => $reference))
    ->condition('rid', $id, '=')
    ->condition('type', $type, '=')
    ->execute();
}

/**
 * Function to get all the references to the current node.
 *
 * @param int $id
 *   The node to get the references for
 * @param string $type
 *   The type of reference to get.
 *
 * @return string|bool
 *   Returns a serialized string of node references or FALSE.
 */
function openlucius_core_node_reference_get($id, $type) {

  // Query the database to get the references to this node.
  $references = db_select('openlucius_core_node_references', 'n')
    ->fields('n', array('type', 'node_references'))
    ->condition('rid', $id, '=')
    ->condition('type', $type, '=')
    ->execute()
    ->fetchAllKeyed(0, 1);

  // Return if set otherwise false.
  return !empty($references) ? $references : FALSE;
}

/**
 * Function to insert an item after a certain key.
 *
 * @param array $haystack
 *   The array to be altered.
 * @param string $needle
 *   The key to be searched.
 * @param array $item
 *   The item array ('key' => value) to be inserted.
 *
 * @return array
 *   Returns either the altered array or the original
 *   if the needle is not found.
 */
function openlucius_core_array_insert_after(array &$haystack, $needle, array $item) {
  $i = 0;
  foreach ($haystack as $key => $value) {
    $i++;
    if ($key == $needle) {
      return array_slice($haystack, 0, $i, TRUE) +
             $item +
             array_slice($haystack, $i, count($haystack) - 1, TRUE);
    }
  }
  return $haystack;
}
